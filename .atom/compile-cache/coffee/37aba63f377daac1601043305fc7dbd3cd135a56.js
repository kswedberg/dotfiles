(function() {
  var $, $$, SyncedSidebar, fs, os, path, temp, waitsForFileToOpen, _, _ref;

  SyncedSidebar = require('../lib/synced-sidebar');

  _ = require('underscore-plus');

  _ref = require('atom-space-pen-views'), $ = _ref.$, $$ = _ref.$$;

  fs = require('fs-plus');

  path = require('path');

  temp = require('temp').track();

  os = require('os');

  waitsForFileToOpen = function(causeFileToOpen) {
    return waitsFor(function(done) {
      var disposable;
      disposable = atom.workspace.onDidOpen(function() {
        disposable.dispose();
        return done();
      });
      return causeFileToOpen();
    });
  };

  describe("SyncedSidebar", function() {
    var root1, root2, sampleJs, sampleTxt, selectEntry, treeView, workspaceElement, _ref1;
    _ref1 = [], treeView = _ref1[0], root1 = _ref1[1], root2 = _ref1[2], sampleJs = _ref1[3], sampleTxt = _ref1[4], workspaceElement = _ref1[5];
    selectEntry = function(pathToSelect) {
      return treeView.selectEntryForPath(atom.project.getDirectories()[0].resolve(pathToSelect));
    };
    beforeEach(function() {
      var fixturesPath;
      fixturesPath = atom.project.getPaths()[0];
      atom.project.setPaths([path.join(fixturesPath, "root-dir1"), path.join(fixturesPath, "root-dir2")]);
      workspaceElement = atom.views.getView(atom.workspace);
      waitsForPromise(function() {
        return atom.packages.activatePackage("tabs");
      });
      waitsForPromise(function() {
        return atom.packages.activatePackage("tree-view");
      });
      waitsForPromise(function() {
        return atom.packages.activatePackage("synced-sidebar");
      });
      return runs(function() {
        atom.commands.dispatch(workspaceElement, 'tree-view:toggle');
        treeView = $(atom.workspace.getLeftPanels()[0].getItem()).view();
        root1 = $(treeView.roots[0]);
        root2 = $(treeView.roots[1]);
        sampleJs = treeView.find('.file:contains(tree-view.js)');
        sampleTxt = treeView.find('.file:contains(tree-view.txt)');
        return expect(treeView.roots[0].directory.watchSubscription).toBeTruthy();
      });
    });
    afterEach(function() {
      return temp.cleanup();
    });
    return describe("when file is selected in tabs pane", function() {
      beforeEach(function() {
        return jasmine.attachToDOM(workspaceElement);
      });
      describe("if sidebar tree view is open", function() {
        return it("shows and focuses the tree view selects the file", function() {
          waitsForPromise(function() {
            return atom.workspace.open(path.join(atom.project.getPaths()[0], 'dir1', 'file1'));
          });
          runs(function() {
            return expect(treeView.selectedEntry().getPath()).toContain(path.join("dir1", "file1"));
          });
          waitsForPromise(function() {
            return atom.workspace.open(path.join(atom.project.getPaths()[1], 'dir3', 'file3'));
          });
          return runs(function() {
            return expect(treeView.selectedEntry().getPath()).toContain(path.join("dir3", "file3"));
          });
        });
      });
      return describe("if sidebar tree view is closed", function() {
        beforeEach(function() {
          atom.commands.dispatch(workspaceElement, 'tree-view:show');
          return atom.commands.dispatch(workspaceElement, 'tree-view:toggle');
        });
        return it("does not open sidebar tree view", function() {
          waitsForPromise(function() {
            return atom.workspace.open(path.join(atom.project.getPaths()[0], 'dir1', 'file1'));
          });
          runs(function() {
            return expect(treeView.selectedEntry().getPath()).not.toContain(path.join("dir1", "file1"));
          });
          waitsForPromise(function() {
            return atom.workspace.open(path.join(atom.project.getPaths()[1], 'dir3', 'file3'));
          });
          return runs(function() {
            return expect(treeView.selectedEntry().getPath()).not.toContain(path.join("dir3", "file3"));
          });
        });
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAiZmlsZSI6ICIiLAogICJzb3VyY2VSb290IjogIiIsCiAgInNvdXJjZXMiOiBbCiAgICAiL1VzZXJzL2tzd2VkYmVyZy8uYXRvbS9wYWNrYWdlcy9zeW5jZWQtc2lkZWJhci9zcGVjL3N5bmNlZC1zaWRlYmFyLXNwZWMuY29mZmVlIgogIF0sCiAgIm5hbWVzIjogW10sCiAgIm1hcHBpbmdzIjogIkFBQUE7QUFBQSxNQUFBLHFFQUFBOztBQUFBLEVBQUEsYUFBQSxHQUFnQixPQUFBLENBQVEsdUJBQVIsQ0FBaEIsQ0FBQTs7QUFBQSxFQUNBLENBQUEsR0FBSSxPQUFBLENBQVEsaUJBQVIsQ0FESixDQUFBOztBQUFBLEVBRUEsT0FBVSxPQUFBLENBQVEsc0JBQVIsQ0FBVixFQUFDLFNBQUEsQ0FBRCxFQUFJLFVBQUEsRUFGSixDQUFBOztBQUFBLEVBR0EsRUFBQSxHQUFLLE9BQUEsQ0FBUSxTQUFSLENBSEwsQ0FBQTs7QUFBQSxFQUlBLElBQUEsR0FBTyxPQUFBLENBQVEsTUFBUixDQUpQLENBQUE7O0FBQUEsRUFLQSxJQUFBLEdBQU8sT0FBQSxDQUFRLE1BQVIsQ0FBZSxDQUFDLEtBQWhCLENBQUEsQ0FMUCxDQUFBOztBQUFBLEVBTUEsRUFBQSxHQUFLLE9BQUEsQ0FBUSxJQUFSLENBTkwsQ0FBQTs7QUFBQSxFQVFBLGtCQUFBLEdBQXFCLFNBQUMsZUFBRCxHQUFBO1dBQ25CLFFBQUEsQ0FBUyxTQUFDLElBQUQsR0FBQTtBQUNQLFVBQUEsVUFBQTtBQUFBLE1BQUEsVUFBQSxHQUFhLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBZixDQUF5QixTQUFBLEdBQUE7QUFDcEMsUUFBQSxVQUFVLENBQUMsT0FBWCxDQUFBLENBQUEsQ0FBQTtlQUNBLElBQUEsQ0FBQSxFQUZvQztNQUFBLENBQXpCLENBQWIsQ0FBQTthQUdBLGVBQUEsQ0FBQSxFQUpPO0lBQUEsQ0FBVCxFQURtQjtFQUFBLENBUnJCLENBQUE7O0FBQUEsRUFlQSxRQUFBLENBQVMsZUFBVCxFQUEwQixTQUFBLEdB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

//# sourceURL=/Users/kswedberg/.atom/packages/synced-sidebar/spec/synced-sidebar-spec.coffee
