(function() {
  var TagView, cwd, git, repo;

  git = require('../../lib/git');

  repo = require('../fixtures').repo;

  TagView = require('../../lib/views/tag-view');

  cwd = repo.getWorkingDirectory();

  describe("TagView", function() {
    beforeEach(function() {
      this.tag = 'tag1';
      return this.view = new TagView(repo, this.tag);
    });
    it("displays 5 commands for the tag", function() {
      return expect(this.view.items.length).toBe(5);
    });
    it("gets the remotes to push to when the push command is selected", function() {
      spyOn(git, 'cmd').andCallFake(function() {
        return Promise.resolve('remotes');
      });
      this.view.confirmed(this.view.items[1]);
      return expect(git.cmd).toHaveBeenCalledWith(['remote'], {
        cwd: cwd
      });
    });
    it("calls git.cmd with 'checkout' to checkout the tag when checkout is selected", function() {
      spyOn(git, 'cmd').andCallFake(function() {
        return Promise.resolve('success');
      });
      this.view.confirmed(this.view.items[2]);
      return expect(git.cmd).toHaveBeenCalledWith(['checkout', this.tag], {
        cwd: cwd
      });
    });
    it("calls git.cmd with 'verify' when verify is selected", function() {
      spyOn(git, 'cmd').andCallFake(function() {
        return Promise.resolve('success');
      });
      this.view.confirmed(this.view.items[3]);
      return expect(git.cmd).toHaveBeenCalledWith(['tag', '--verify', this.tag], {
        cwd: cwd
      });
    });
    return it("calls git.cmd with 'delete' when delete is selected", function() {
      spyOn(git, 'cmd').andCallFake(function() {
        return Promise.resolve('success');
      });
      this.view.confirmed(this.view.items[4]);
      return expect(git.cmd).toHaveBeenCalledWith(['tag', '--delete', this.tag], {
        cwd: cwd
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAiZmlsZSI6ICIiLAogICJzb3VyY2VSb290IjogIiIsCiAgInNvdXJjZXMiOiBbCiAgICAiL1VzZXJzL2tzd2VkYmVyZy8uYXRvbS9wYWNrYWdlcy9naXQtcGx1cy9zcGVjL3ZpZXdzL3RhZy12aWV3LXNwZWMuY29mZmVlIgogIF0sCiAgIm5hbWVzIjogW10sCiAgIm1hcHBpbmdzIjogIkFBQUE7QUFBQSxNQUFBLHVCQUFBOztBQUFBLEVBQUEsR0FBQSxHQUFNLE9BQUEsQ0FBUSxlQUFSLENBQU4sQ0FBQTs7QUFBQSxFQUNDLE9BQVEsT0FBQSxDQUFRLGFBQVIsRUFBUixJQURELENBQUE7O0FBQUEsRUFFQSxPQUFBLEdBQVUsT0FBQSxDQUFRLDBCQUFSLENBRlYsQ0FBQTs7QUFBQSxFQUlBLEdBQUEsR0FBTSxJQUFJLENBQUMsbUJBQUwsQ0FBQSxDQUpOLENBQUE7O0FBQUEsRUFNQSxRQUFBLENBQVMsU0FBVCxFQUFvQixTQUFBLEdBQUE7QUFDbEIsSUFBQSxVQUFBLENBQVcsU0FBQSxHQUFBO0FBQ1QsTUFBQSxJQUFDLENBQUEsR0FBRCxHQUFPLE1BQVAsQ0FBQTthQUNBLElBQUMsQ0FBQSxJQUFELEdBQVksSUFBQSxPQUFBLENBQVEsSUFBUixFQUFjLElBQUMsQ0FBQSxHQUFmLEVBRkg7SUFBQSxDQUFYLENBQUEsQ0FBQTtBQUFBLElBSUEsRUFBQSxDQUFHLGlDQUFILEVBQXNDLFNBQUEsR0FBQTthQUNwQyxNQUFBLENBQU8sSUFBQyxDQUFBLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBbkIsQ0FBMEIsQ0FBQyxJQUEzQixDQUFnQyxDQUFoQyxFQURvQztJQUFBLENBQXRDLENBSkEsQ0FBQTtBQUFBLElBT0EsRUFBQSxDQUFHLCtEQUFILEVBQW9FLFNBQUEsR0FBQTtBQUNsRSxNQUFBLEtBQUEsQ0FBTSxHQUFOLEVBQVcsS0FBWCxDQUFpQixDQUFDLFdBQWxCLENBQThCLFNBQUEsR0FBQTtlQUFHLE9BQU8sQ0FBQyxPQUFSLENBQWdCLFNBQWhCLEVBQUg7TUFBQSxDQUE5QixDQUFBLENBQUE7QUFBQSxNQUNBLElBQUMsQ0FBQSxJQUFJLENBQUMsU0FBTixDQUFnQixJQUFDLENBQUEsSUFBSSxDQUFDLEtBQU0sQ0FBQSxDQUFBLENBQTVCLENBREEsQ0FBQTthQUVBLE1BQUEsQ0FBTyxHQUFHLENBQUMsR0FBWCxDQUFlLENBQUMsb0JBQWhCLENBQXFDLENBQUMsUUFBRCxDQUFyQyxFQUFpRDtBQUFBLFFBQUMsS0FBQSxHQUFEO09BQWpELEVBSGtFO0lBQUEsQ0FBcEUsQ0FQQSxDQUFBO0FBQUEsSUFZQSxFQUFBLENBQUcsNkVBQUgsRUFBa0YsU0FBQSxHQUFBO0FBQ2hGLE1BQUEsS0FBQSxDQUFNLEdBQU4sRUFBVyxLQUFYLENBQWlCLENBQUMsV0FBbEIsQ0FBOEIsU0FBQSxHQUFBO2VBQUcsT0FBTyxDQUFDLE9BQVIsQ0FBZ0IsU0FBaEIsRUFBSDtNQUFBLENBQTlCLENBQUEsQ0FBQTtBQUFBLE1BQ0EsSUFBQyxDQUFBLElBQUksQ0FBQyxTQUFOLENBQWdCLElBQUMsQ0FBQSxJQUFJLENBQUMsS0FBTSxDQUFBLENBQUEsQ0FBNUIsQ0FEQSxDQUFBO2FBRUEsTUFBQSxDQUFPLEdBQUcsQ0FBQyxHQUFYLENBQWUsQ0FBQyxvQkFBaEIsQ0FBcUMsQ0FBQyxVQUFELEVBQWEsSUFBQyxDQUFBLEdBQWQsQ0FBckMsRUFBeUQ7QUFBQSxRQUFDLEtBQUEsR0FBRDtPQUF6RCxFQUhnRjtJQUFBLENBQWxGLENBWkEsQ0FBQTtBQUFBLElBaUJBLEVBQUEsQ0FBRyxxREFBSCxFQUEwRCxTQUFBLEdBQUE7QUFDeEQsTUFBQSxLQUFBLENBQU0sR0FBTixFQUFXLEtBQVgsQ0FBaUIsQ0FBQyxXQUFsQixDQUE4QixTQUFBLEdBQUE7ZUFBRyxPQUFPLENBQUMsT0FBUixDQUFnQixTQUFoQixFQUFIO01BQUEsQ0FBOUIsQ0FBQSxDQUFBO0FBQUEsTUFDQSxJQUFDLENBQUEsSUFBSSxDQUFDLFNBQU4sQ0FBZ0IsSUFBQyxDQUFBLElBQUksQ0FBQyxLQUFNLENBQUEsQ0FBQSxDQUE1QixDQURBLENBQUE7YUFFQSxNQUFBLENBQU8sR0FBRyxDQUFDLEdBQVgsQ0FBZSxDQUFDLG9CQUFoQixDQUFxQyxDQUFDLEtBQUQsRUFBUSxVQUFSLEVBQW9CLElBQUMsQ0FBQSxHQUFyQixDQUFyQyxFQUFnRTtBQUFBLFFBQUMsS0FBQSxHQUFEO09BQWhFLEVBSHdEO0lBQUEsQ0FBMUQsQ0FqQkEsQ0FBQTtXQXNCQSxFQUFBLENBQUcscURBQUgsRUFBMEQsU0FBQSxHQUFBO0FBQ3hELE1BQUEsS0FBQSxDQUFNLEdBQU4sRUFBVyxLQUFYLENBQWlCLENBQUMsV0FBbEIsQ0FBOEIsU0FBQSxHQUFBO2VBQUcsT0FBTyxDQUFDLE9BQVIsQ0FBZ0IsU0FBaEIsRUFBSDtNQUFBLENBQTlCLENBQUEsQ0FBQTtBQUFBLE1BQ0EsSUFBQyxDQUFBLElBQUksQ0FBQyxTQUFOLENBQWdCLElBQUMsQ0FBQSxJQUFJLENBQUMsS0FBTSxDQUFBLENBQUEsQ0FBNUIsQ0FEQSxDQUFBO2FBRUEsTUFBQSxDQUFPLEdBQUcsQ0FBQyxHQUFYLENBQWUsQ0FBQyxvQkFBaEIsQ0FBcUMsQ0FBQyxLQUFELEVBQVEsVUFBUixFQUFvQixJQUFDLENBQUEsR0FBckIsQ0FBckMsRUFBZ0U7QUFBQSxRQUFDLEtBQUEsR0FBRDtPQUFoRSxFQUh3RDtJQUFBLENBQTFELEVBdkJrQjtFQUFBLENBQXBCLENBTkEsQ0FBQTtBQUFBIgp9

//# sourceURL=/Users/kswedberg/.atom/packages/git-plus/spec/views/tag-view-spec.coffee
