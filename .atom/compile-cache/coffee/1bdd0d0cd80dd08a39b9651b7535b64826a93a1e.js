(function() {
  var Dialog, Point, emmet, resources, tabStops, utilsCommon;

  Point = require('atom').Point;

  emmet = require('../vendor/emmet-app').emmet;

  utilsCommon = emmet.require('utils/common');

  tabStops = emmet.require('assets/tabStops');

  resources = emmet.require("assets/resources");

  Dialog = require('./dialog');

  module.exports = {
    setupContext: function(editorView, cursor, cursorNum) {
      this.editorView = editorView;
      this.cursor = cursor;
      this.cursorNum = cursorNum;
      this.editor = this.editorView.getEditor();
      this.indentation = this.editor.getTabText();
      resources.setVariable("indentation", this.indentation);
      return this.syntax = this.getSyntax();
    },
    getSelectionRange: function() {
      var range;
      range = this.editor.getSelection(this.cursorNum).getBufferRange();
      return {
        start: this.editor.getBuffer().characterIndexForPosition(range.start),
        end: this.editor.getBuffer().characterIndexForPosition(range.end)
      };
    },
    createSelection: function(start, end) {
      return this.editor.getSelection(this.cursorNum).setBufferRange({
        start: this.editor.getBuffer().positionForCharacterIndex(start),
        end: this.editor.getBuffer().positionForCharacterIndex(end)
      });
    },
    getCurrentLineRange: function() {
      var index, lineLength, row;
      row = this.cursor.getBufferRow();
      lineLength = this.editor.lineLengthForBufferRow(row);
      index = this.editor.getBuffer().characterIndexForPosition({
        row: row,
        column: 0
      });
      return {
        start: index,
        end: index + lineLength
      };
    },
    getCaretPos: function() {
      var column, row;
      row = this.cursor.getBufferRow();
      column = this.cursor.getBufferColumn();
      return this.editor.getBuffer().characterIndexForPosition({
        row: row,
        column: column
      });
    },
    setCaretPos: function(index) {
      var pos;
      pos = this.editor.getBuffer().positionForCharacterIndex(index);
      this.editor.getSelection(this.cursorNum).clear();
      return this.cursor.setBufferPosition(pos);
    },
    getCurrentLine: function() {
      var row;
      row = this.cursor.getBufferRow();
      return this.editor.lineForBufferRow(row);
    },
    replaceContent: function(value, start, end, noIndent) {
      var changeRange, cursorRange, firstTabStop, tabstopData;
      if (end == null) {
        end = start == null ? this.getContent().length : start;
      }
      if (start == null) {
        start = 0;
      }
      if (!noIndent) {
        value = utilsCommon.padString(value, utilsCommon.getLinePaddingFromPosition(this.getContent(), start));
      }
      tabstopData = tabStops.extract(value, {
        escape: function(ch) {
          return ch;
        }
      });
      value = tabstopData.text.replace(/\t/g, this.editorView.editor.getTabText());
      firstTabStop = tabstopData.tabstops[0];
      if (firstTabStop) {
        firstTabStop.start += start;
        firstTabStop.end += start;
      } else {
        firstTabStop = {
          start: value.length + start,
          end: value.length + start
        };
      }
      changeRange = [Point.fromObject(this.editor.getBuffer().positionForCharacterIndex(start)), Point.fromObject(this.editor.getBuffer().positionForCharacterIndex(end))];
      this.editor.getBuffer().change(changeRange, value);
      cursorRange = {};
      cursorRange.start = Point.fromObject(this.editor.getBuffer().positionForCharacterIndex(firstTabStop.start));
      cursorRange.end = Point.fromObject(this.editor.getBuffer().positionForCharacterIndex(firstTabStop.end));
      if (value !== this.editor.getTabText()) {
        return this.editor.getSelection(this.cursorNum).setBufferRange(cursorRange);
      }
    },
    getContent: function() {
      return this.editor.getText();
    },
    getSyntax: function() {
      var scope, scopes, _i, _len;
      scopes = this.cursor.getScopes();
      for (_i = 0, _len = scopes.length; _i < _len; _i++) {
        scope = scopes[_i];
        if (/jade/.test(scope)) {
          return "jade";
        } else if (/haml/.test(scope)) {
          return "haml";
        } else if (/xsl/.test(scope)) {
          return "xsl";
        } else if (/xml/.test(scope)) {
          return "xml";
        } else if (/php/.test(scope)) {
          return "php";
        } else if (/html/.test(scope)) {
          return "html";
        }
        if (/less/.test(scope)) {
          return "less";
        } else if (/scss/.test(scope)) {
          return "scss";
        } else if (/sass/.test(scope)) {
          return "sass";
        } else if (/stylus/.test(scope)) {
          return "stylus";
        } else if (/css/.test(scope)) {
          return "css";
        }
      }
    },
    getProfileName: function() {
      return this.editor.getGrammar().name;
    },
    getSelection: function() {
      return this.editor.getSelection(this.cursorNum).getText();
    },
    getFilePath: function() {
      return this.editor.buffer.file.path;
    },
    setSavedText: function(text) {
      return this.savedText = text;
    },
    getSavedText: function() {
      return this.savedText;
    },
    prompt: function(message, callerContext, text, caller, callerArgs) {
      var copy;
      if (text == null) {
        text = null;
      }
      if (caller == null) {
        caller = null;
      }
      if (callerArgs == null) {
        callerArgs = null;
      }
      if (text !== null) {
        callerArgs[0].setSavedText(text);
        return caller.apply(callerContext, callerArgs);
      } else if (this.getSavedText() != null) {
        copy = this.getSavedText();
        this.setSavedText(null);
        return copy;
      } else {
        caller = arguments.callee.caller;
        callerArgs = caller["arguments"];
        new Dialog(message, this.prompt, {
          caller: caller,
          callerArgs: callerArgs,
          callerContext: callerContext
        });
        return "";
      }
    }
  };

}).call(this);

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=/Users/kswedberg/.atom/packages/emmet/lib/editor-proxy.coffee