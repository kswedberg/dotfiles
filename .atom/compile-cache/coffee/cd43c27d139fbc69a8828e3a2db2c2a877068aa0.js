(function() {
  var emojiCheatSheet, packagesToTest;

  emojiCheatSheet = require('../lib/emoji-cheat-sheet');

  packagesToTest = {
    gfm: {
      name: 'language-gfm',
      file: 'test.md'
    }
  };

  describe("Emojis autocompletions", function() {
    var editor, getCompletions, provider, _ref;
    _ref = [], editor = _ref[0], provider = _ref[1];
    getCompletions = function() {
      var cursor, end, prefix, request, start;
      cursor = editor.getLastCursor();
      start = cursor.getBeginningOfCurrentWordBufferPosition();
      end = cursor.getBufferPosition();
      prefix = editor.getTextInRange([start, end]);
      request = {
        editor: editor,
        bufferPosition: end,
        scopeDescriptor: cursor.getScopeDescriptor(),
        prefix: prefix
      };
      return provider.getSuggestions(request);
    };
    beforeEach(function() {
      waitsForPromise(function() {
        return atom.packages.activatePackage('autocomplete-emojis');
      });
      runs(function() {
        return provider = atom.packages.getActivePackage('autocomplete-emojis').mainModule.getProvider();
      });
      return waitsFor(function() {
        return Object.keys(provider.properties).length > 0;
      });
    });
    Object.keys(packagesToTest).forEach(function(packageLabel) {
      return describe("" + packageLabel + " files", function() {
        beforeEach(function() {
          atom.config.set('autocomplete-emojis.enableUnicodeEmojis', true);
          atom.config.set('autocomplete-emojis.enableMarkdownEmojis', true);
          waitsForPromise(function() {
            return atom.packages.activatePackage(packagesToTest[packageLabel].name);
          });
          waitsForPromise(function() {
            return atom.workspace.open(packagesToTest[packageLabel].file);
          });
          return runs(function() {
            return editor = atom.workspace.getActiveTextEditor();
          });
        });
        it("returns no completions without a prefix", function() {
          editor.setText('');
          return expect(getCompletions().length).toBe(0);
        });
        it("returns no completions with an improper prefix", function() {
          editor.setText(':');
          editor.setCursorBufferPosition([0, 0]);
          expect(getCompletions().length).toBe(0);
          editor.setCursorBufferPosition([0, 1]);
          expect(getCompletions().length).toBe(0);
          editor.setText(':*');
          editor.setCursorBufferPosition([0, 1]);
          return expect(getCompletions().length).toBe(0);
        });
        it("autocompletes emojis with a proper prefix", function() {
          var completions;
          editor.setText(":sm");
          editor.setCursorBufferPosition([0, 3]);
          completions = getCompletions();
          expect(completions.length).toBe(96);
          expect(completions[0].text).toBe('üòÑ');
          expect(completions[0].replacementPrefix).toBe(':sm');
          expect(completions[49].text).toBe(':smirk:');
          expect(completions[49].replacementPrefix).toBe(':sm');
          expect(completions[49].rightLabelHTML).toMatch(/smirk\.png/);
          expect(completions[50].text).toBe(':smile:');
          expect(completions[50].replacementPrefix).toBe(':sm');
          expect(completions[50].rightLabelHTML).toMatch(/smile\.png/);
          editor.setText(":+");
          editor.setCursorBufferPosition([0, 2]);
          completions = getCompletions();
          expect(completions.length).toBe(2);
          expect(completions[0].text).toBe('üëç');
          expect(completions[0].replacementPrefix).toBe(':+');
          expect(completions[1].text).toBe(':+1:');
          expect(completions[1].replacementPrefix).toBe(':+');
          return expect(completions[1].rightLabelHTML).toMatch(/\+1\.png/);
        });
        it("autocompletes markdown emojis with '::'", function() {
          var completions;
          editor.setText("::sm");
          editor.setCursorBufferPosition([0, 4]);
          completions = getCompletions();
          expect(completions.length).toBe(47);
          expect(completions[0].text).toBe(':smirk:');
          expect(completions[0].replacementPrefix).toBe('::sm');
          expect(completions[0].rightLabelHTML).toMatch(/smirk\.png/);
          expect(completions[1].text).toBe(':smile:');
          expect(completions[1].replacementPrefix).toBe('::sm');
          return expect(completions[1].rightLabelHTML).toMatch(/smile\.png/);
        });
        it("autocompletes unicode emojis with a proper prefix", function() {
          var completions;
          atom.config.set('autocomplete-emojis.enableUnicodeEmojis', true);
          atom.config.set('autocomplete-emojis.enableMarkdownEmojis', false);
          editor.setText(":sm");
          editor.setCursorBufferPosition([0, 3]);
          completions = getCompletions();
          expect(completions.length).toBe(49);
          expect(completions[0].text).toBe('üòÑ');
          return expect(completions[0].replacementPrefix).toBe(':sm');
        });
        it("autocompletes markdown emojis with a proper prefix", function() {
          var completions;
          atom.config.set('autocomplete-emojis.enableUnicodeEmojis', false);
          atom.config.set('autocomplete-emojis.enableMarkdownEmojis', true);
          editor.setText(":sm");
          editor.setCursorBufferPosition([0, 3]);
          completions = getCompletions();
          expect(completions.length).toBe(47);
          expect(completions[0].text).toBe(':smirk:');
          return expect(completions[0].replacementPrefix).toBe(':sm');
        });
        return it("autocompletes no emojis", function() {
          var completions;
          atom.config.set('autocomplete-emojis.enableUnicodeEmojis', false);
          atom.config.set('autocomplete-emojis.enableMarkdownEmojis', false);
          editor.setText(":sm");
          editor.setCursorBufferPosition([0, 3]);
          completions = getCompletions();
          return expect(completions.length).toBe(0);
        });
      });
    });
    return describe('when the autocomplete-emojis:showCheatSheet event is triggered', function() {
      var workspaceElement;
      workspaceElement = null;
      beforeEach(function() {
        return workspaceElement = atom.views.getView(atom.workspace);
      });
      return it('opens Emoji Cheat Sheet in browser', function() {
        spyOn(emojiCheatSheet, 'openUrlInBrowser');
        atom.commands.dispatch(workspaceElement, 'autocomplete-emojis:show-cheat-sheet');
        return expect(emojiCheatSheet.openUrlInBrowser).toHaveBeenCalledWith('http://www.emoji-cheat-sheet.com/');
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,

//# sourceURL=/Users/kswedberg/.atom/packages/autocomplete-emojis/spec/autocomplete-emojis-spec.coffee
