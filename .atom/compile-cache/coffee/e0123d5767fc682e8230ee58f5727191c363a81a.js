(function() {
  var StyleText;

  StyleText = require("../../lib/commands/style-text");

  describe("StyleText", function() {
    describe(".isStyleOn", function() {
      it("check a style is added", function() {
        var cmd, fixture;
        cmd = new StyleText("bold");
        fixture = "**bold**";
        return expect(cmd.isStyleOn(fixture)).toBe(true);
      });
      it("check any bold style is in string", function() {
        var cmd, fixture;
        cmd = new StyleText("bold");
        fixture = "hello **bold** world";
        return expect(cmd.isStyleOn(fixture)).toBe(true);
      });
      it("check any italic is in string", function() {
        var cmd, fixture;
        cmd = new StyleText("italic");
        fixture = "_italic_ yah _text_";
        return expect(cmd.isStyleOn(fixture)).toBe(true);
      });
      it("check any strike is in string", function() {
        var cmd, fixture;
        cmd = new StyleText("strikethrough");
        fixture = "**bold** one ~~strike~~ two _italic_";
        return expect(cmd.isStyleOn(fixture)).toBe(true);
      });
      return it("check a style is not added", function() {
        var cmd, fixture;
        cmd = new StyleText("bold");
        fixture = "_not bold_";
        return expect(cmd.isStyleOn(fixture)).toBe(false);
      });
    });
    describe(".removeStyle", function() {
      it("remove a style from text", function() {
        var cmd, fixture;
        cmd = new StyleText("italic");
        fixture = "_italic text_";
        return expect(cmd.removeStyle(fixture)).toEqual("italic text");
      });
      it("remove bold style from text", function() {
        var cmd, fixture;
        cmd = new StyleText("bold");
        fixture = "**bold text** in a string";
        return expect(cmd.removeStyle(fixture)).toEqual("bold text in a string");
      });
      return it("remove italic styles from text", function() {
        var cmd, fixture;
        cmd = new StyleText("italic");
        fixture = "_italic_ yah _text_ loh _more_";
        return expect(cmd.removeStyle(fixture)).toEqual("italic yah text loh more");
      });
    });
    describe(".addStyle", function() {
      return it("add a style to text", function() {
        var cmd, fixture;
        cmd = new StyleText("bold");
        fixture = "bold text";
        return expect(cmd.addStyle(fixture)).toEqual("**bold text**");
      });
    });
    return describe(".trigger", function() {
      var editor;
      editor = null;
      beforeEach(function() {
        waitsForPromise(function() {
          return atom.workspace.open("empty.markdown");
        });
        return runs(function() {
          return editor = atom.workspace.getActiveTextEditor();
        });
      });
      it("insert empty bold style", function() {
        new StyleText("bold").trigger();
        expect(editor.getText()).toBe("****");
        return expect(editor.getCursorBufferPosition().column).toBe(2);
      });
      it("apply italic style to word", function() {
        editor.setText("italic");
        editor.setCursorBufferPosition([0, 2]);
        new StyleText("italic").trigger();
        expect(editor.getText()).toBe("_italic_");
        return expect(editor.getCursorBufferPosition().column).toBe(8);
      });
      it("remove italic style from word", function() {
        editor.setText("_italic_");
        editor.setCursorBufferPosition([0, 3]);
        new StyleText("italic").trigger();
        expect(editor.getText()).toBe("italic");
        return expect(editor.getCursorBufferPosition().column).toBe(6);
      });
      return it("toggle code style on selection", function() {
        editor.setText("some code here");
        editor.setSelectedBufferRange([[0, 5], [0, 9]]);
        new StyleText("code").trigger();
        expect(editor.getText()).toBe("some `code` here");
        return expect(editor.getCursorBufferPosition().column).toBe(11);
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAiZmlsZSI6ICIiLAogICJzb3VyY2VSb290IjogIiIsCiAgInNvdXJjZXMiOiBbCiAgICAiL1VzZXJzL2tzd2VkYmVyZy8uYXRvbS9wYWNrYWdlcy9tYXJrZG93bi13cml0ZXIvc3BlYy9jb21tYW5kcy9zdHlsZS10ZXh0LXNwZWMuY29mZmVlIgogIF0sCiAgIm5hbWVzIjogW10sCiAgIm1hcHBpbmdzIjogIkFBQUE7QUFBQSxNQUFBLFNBQUE7O0FBQUEsRUFBQSxTQUFBLEdBQVksT0FBQSxDQUFRLCtCQUFSLENBQVosQ0FBQTs7QUFBQSxFQUVBLFFBQUEsQ0FBUyxXQUFULEVBQXNCLFNBQUEsR0FBQTtBQUNwQixJQUFBLFFBQUEsQ0FBUyxZQUFULEVBQXVCLFNBQUEsR0FBQTtBQUNyQixNQUFBLEVBQUEsQ0FBRyx3QkFBSCxFQUE2QixTQUFBLEdBQUE7QUFDM0IsWUFBQSxZQUFBO0FBQUEsUUFBQSxHQUFBLEdBQVUsSUFBQSxTQUFBLENBQVUsTUFBVixDQUFWLENBQUE7QUFBQSxRQUNBLE9BQUEsR0FBVSxVQURWLENBQUE7ZUFFQSxNQUFBLENBQU8sR0FBRyxDQUFDLFNBQUosQ0FBYyxPQUFkLENBQVAsQ0FBOEIsQ0FBQyxJQUEvQixDQUFvQyxJQUFwQyxFQUgyQjtNQUFBLENBQTdCLENBQUEsQ0FBQTtBQUFBLE1BS0EsRUFBQSxDQUFHLG1DQUFILEVBQXdDLFNBQUEsR0FBQTtBQUN0QyxZQUFBLFlBQUE7QUFBQSxRQUFBLEdBQUEsR0FBVSxJQUFBLFNBQUEsQ0FBVSxNQUFWLENBQVYsQ0FBQTtBQUFBLFFBQ0EsT0FBQSxHQUFVLHNCQURWLENBQUE7ZUFFQSxNQUFBLENBQU8sR0FBRyxDQUFDLFNBQUosQ0FBYyxPQUFkLENBQVAsQ0FBOEIsQ0FBQyxJQUEvQixDQUFvQyxJQUFwQyxFQUhzQztNQUFBLENBQXhDLENBTEEsQ0FBQTtBQUFBLE1BVUEsRUFBQSxDQUFHLCtCQUFILEVBQW9DLFNBQUEsR0FBQTtBQUNsQyxZQUFBLFlBQUE7QUFBQSxRQUFBLEdBQUEsR0FB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

//# sourceURL=/Users/kswedberg/.atom/packages/markdown-writer/spec/commands/style-text-spec.coffee
