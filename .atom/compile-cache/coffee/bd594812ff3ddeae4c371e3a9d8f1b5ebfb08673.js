(function() {
  var StyleLine;

  StyleLine = require("../../lib/commands/style-line");

  describe("StyleLine", function() {
    describe(".isStyleOn", function() {
      it("check heading 1 exists", function() {
        var cmd, fixture;
        cmd = new StyleLine("h1");
        fixture = "# heading 1";
        return expect(cmd.isStyleOn(fixture)).toBe(true);
      });
      it("check heading 1 not exists", function() {
        var cmd, fixture;
        cmd = new StyleLine("h1");
        fixture = "## heading 1";
        return expect(cmd.isStyleOn(fixture)).toBe(false);
      });
      it("check ul exists", function() {
        var cmd, fixture;
        cmd = new StyleLine("ul");
        fixture = "* unordered list";
        expect(cmd.isStyleOn(fixture)).toBe(true);
        fixture = "- unordered list";
        return expect(cmd.isStyleOn(fixture)).toBe(true);
      });
      return it("check ul not exists", function() {
        var cmd, fixture;
        cmd = new StyleLine("ul");
        fixture = "a normal list";
        expect(cmd.isStyleOn(fixture)).toBe(false);
        fixture = "0. ordered list";
        return expect(cmd.isStyleOn(fixture)).toBe(false);
      });
    });
    describe(".addStyle", function() {
      it("applies heading 1 styles", function() {
        var cmd, fixture;
        atom.config.set("markdown-writer.lineStyles.h1", {
          before: "# ",
          after: " #"
        });
        cmd = new StyleLine("h1");
        fixture = "## heading 1 ##";
        return expect(cmd.addStyle(fixture)).toBe("# heading 1 #");
      });
      it("applies heading 2 styles", function() {
        var cmd, fixture;
        cmd = new StyleLine("h2");
        fixture = "# heading 2";
        return expect(cmd.addStyle(fixture)).toBe("## heading 2");
      });
      return it("applies blockquote styles", function() {
        var cmd, fixture;
        cmd = new StyleLine("blockquote");
        fixture = "blockquote";
        return expect(cmd.addStyle(fixture)).toBe("> blockquote");
      });
    });
    describe(".removeStyle", function() {
      it("applies heading 1 styles", function() {
        var cmd, fixture;
        atom.config.set("markdown-writer.lineStyles.h1", {
          before: "# ",
          after: " #"
        });
        cmd = new StyleLine("h1");
        fixture = "# heading 1 #";
        return expect(cmd.removeStyle(fixture)).toBe("heading 1");
      });
      it("remove heading 3 styles", function() {
        var cmd, fixture;
        cmd = new StyleLine("h3");
        fixture = "### heading 3";
        return expect(cmd.removeStyle(fixture)).toBe("heading 3");
      });
      return it("remove ol styles", function() {
        var cmd, fixture;
        cmd = new StyleLine("ol");
        fixture = "123. ordered list";
        return expect(cmd.removeStyle(fixture)).toBe("ordered list");
      });
    });
    return describe(".trigger", function() {
      var editor;
      editor = null;
      beforeEach(function() {
        waitsForPromise(function() {
          return atom.workspace.open("empty.markdown");
        });
        return runs(function() {
          return editor = atom.workspace.getActiveTextEditor();
        });
      });
      it("insert empty blockquote style", function() {
        new StyleLine("blockquote").trigger();
        expect(editor.getText()).toBe("> ");
        return expect(editor.getCursorBufferPosition().column).toBe(2);
      });
      it("apply heading 2", function() {
        editor.setText("# heading");
        new StyleLine("h2").trigger();
        expect(editor.getText()).toBe("## heading");
        return expect(editor.getCursorBufferPosition().column).toBe(10);
      });
      it("remove heading 3", function() {
        editor.setText("### heading");
        new StyleLine("h3").trigger();
        expect(editor.getText()).toBe("heading");
        return expect(editor.getCursorBufferPosition().column).toBe(7);
      });
      it("apply ordered/unordered list", function() {
        editor.setText("- list");
        new StyleLine("ol").trigger();
        expect(editor.getText()).toBe("1. list");
        expect(editor.getCursorBufferPosition().column).toBe(7);
        new StyleLine("ul").trigger();
        expect(editor.getText()).toBe("- list");
        return expect(editor.getCursorBufferPosition().column).toBe(6);
      });
      return it("apply task/taskdone list", function() {
        editor.setText("task");
        new StyleLine("task").trigger();
        expect(editor.getText()).toBe("- [ ] task");
        new StyleLine("taskdone").trigger();
        expect(editor.getText()).toBe("- [X] task");
        new StyleLine("task").trigger();
        expect(editor.getText()).toBe("- [ ] task");
        new StyleLine("task").trigger();
        return expect(editor.getText()).toBe("task");
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAiZmlsZSI6ICIiLAogICJzb3VyY2VSb290IjogIiIsCiAgInNvdXJjZXMiOiBbCiAgICAiL1VzZXJzL2tzd2VkYmVyZy8uYXRvbS9wYWNrYWdlcy9tYXJrZG93bi13cml0ZXIvc3BlYy9jb21tYW5kcy9zdHlsZS1saW5lLXNwZWMuY29mZmVlIgogIF0sCiAgIm5hbWVzIjogW10sCiAgIm1hcHBpbmdzIjogIkFBQUE7QUFBQSxNQUFBLFNBQUE7O0FBQUEsRUFBQSxTQUFBLEdBQVksT0FBQSxDQUFRLCtCQUFSLENBQVosQ0FBQTs7QUFBQSxFQUVBLFFBQUEsQ0FBUyxXQUFULEVBQXNCLFNBQUEsR0FBQTtBQUNwQixJQUFBLFFBQUEsQ0FBUyxZQUFULEVBQXVCLFNBQUEsR0FBQTtBQUNyQixNQUFBLEVBQUEsQ0FBRyx3QkFBSCxFQUE2QixTQUFBLEdBQUE7QUFDM0IsWUFBQSxZQUFBO0FBQUEsUUFBQSxHQUFBLEdBQVUsSUFBQSxTQUFBLENBQVUsSUFBVixDQUFWLENBQUE7QUFBQSxRQUNBLE9BQUEsR0FBVSxhQURWLENBQUE7ZUFFQSxNQUFBLENBQU8sR0FBRyxDQUFDLFNBQUosQ0FBYyxPQUFkLENBQVAsQ0FBOEIsQ0FBQyxJQUEvQixDQUFvQyxJQUFwQyxFQUgyQjtNQUFBLENBQTdCLENBQUEsQ0FBQTtBQUFBLE1BS0EsRUFBQSxDQUFHLDRCQUFILEVBQWlDLFNBQUEsR0FBQTtBQUMvQixZQUFBLFlBQUE7QUFBQSxRQUFBLEdBQUEsR0FBVSxJQUFBLFNBQUEsQ0FBVSxJQUFWLENBQVYsQ0FBQTtBQUFBLFFBQ0EsT0FBQSxHQUFVLGNBRFYsQ0FBQTtlQUVBLE1BQUEsQ0FBTyxHQUFHLENBQUMsU0FBSixDQUFjLE9BQWQsQ0FBUCxDQUE4QixDQUFDLElBQS9CLENBQW9DLEtBQXBDLEVBSCtCO01BQUEsQ0FBakMsQ0FMQSxDQUFBO0FBQUEsTUFVQSxFQUFBLENBQUcsaUJBQUgsRUFBc0IsU0FBQSxHQUFBO0FBQ3BCLFlBQUEsWUFBQTtBQUFBLFFBQUEsR0FBQSxHQUFV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

//# sourceURL=/Users/kswedberg/.atom/packages/markdown-writer/spec/commands/style-line-spec.coffee
