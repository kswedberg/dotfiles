(function() {
  var GitCommitAmend, Path, commitFilePath, commitPane, currentPane, fs, git, pathToRepoFile, repo, textEditor, _ref;

  fs = require('fs-plus');

  Path = require('flavored-path');

  git = require('../../lib/git');

  GitCommitAmend = require('../../lib/models/git-commit-amend');

  _ref = require('../fixtures'), repo = _ref.repo, pathToRepoFile = _ref.pathToRepoFile, textEditor = _ref.textEditor, commitPane = _ref.commitPane, currentPane = _ref.currentPane;

  commitFilePath = Path.join(repo.getPath(), 'COMMIT_EDITMSG');

  describe("GitCommitAmend", function() {
    beforeEach(function() {
      spyOn(atom.workspace, 'getActivePane').andReturn(currentPane);
      spyOn(atom.workspace, 'open').andReturn(Promise.resolve(textEditor));
      spyOn(atom.workspace, 'getPanes').andReturn([currentPane, commitPane]);
      spyOn(atom.workspace, 'paneForURI').andReturn(commitPane);
      spyOn(git, 'refresh');
      spyOn(commitPane, 'destroy').andCallThrough();
      spyOn(currentPane, 'activate');
      spyOn(fs, 'unlinkSync');
      spyOn(fs, 'readFileSync').andReturn('');
      spyOn(git, 'stagedFiles').andCallFake(function() {
        var args;
        args = git.stagedFiles.mostRecentCall.args;
        if (args[0].getWorkingDirectory() === repo.getWorkingDirectory()) {
          return Promise.resolve([pathToRepoFile]);
        }
      });
      return spyOn(git, 'cmd').andCallFake(function() {
        var args;
        args = git.cmd.mostRecentCall.args[0];
        switch (args[0]) {
          case 'whatchanged':
            return Promise.resolve('last commit');
          case 'status':
            return Promise.resolve('current status');
          default:
            return Promise.resolve('');
        }
      });
    });
    it("gets the previous commit message and changed files", function() {
      var expectedGitArgs;
      expectedGitArgs = ['whatchanged', '-1', '--name-status', '--format=%B'];
      GitCommitAmend(repo);
      return expect(git.cmd).toHaveBeenCalledWith(expectedGitArgs, {
        cwd: repo.getWorkingDirectory()
      });
    });
    it("writes to the new commit file", function() {
      spyOn(fs, 'writeFileSync');
      GitCommitAmend(repo);
      waitsFor(function() {
        return fs.writeFileSync.callCount > 0;
      });
      return runs(function() {
        var actualPath;
        actualPath = fs.writeFileSync.mostRecentCall.args[0];
        return expect(actualPath).toEqual(commitFilePath);
      });
    });
    it("shows the file", function() {
      GitCommitAmend(repo);
      waitsFor(function() {
        return atom.workspace.open.callCount > 0;
      });
      return runs(function() {
        return expect(atom.workspace.open).toHaveBeenCalled();
      });
    });
    it("calls git.cmd with ['commit'...] on textEditor save", function() {
      GitCommitAmend(repo);
      textEditor.save();
      return expect(git.cmd).toHaveBeenCalledWith(['commit', '--amend', '--cleanup=strip', "--file=" + commitFilePath], {
        cwd: repo.getWorkingDirectory()
      });
    });
    it("closes the commit pane when commit is successful", function() {
      GitCommitAmend(repo);
      textEditor.save();
      waitsFor(function() {
        return commitPane.destroy.callCount > 0;
      });
      return runs(function() {
        return expect(commitPane.destroy).toHaveBeenCalled();
      });
    });
    return it("cancels the commit on textEditor destroy", function() {
      GitCommitAmend(repo);
      textEditor.destroy();
      expect(currentPane.activate).toHaveBeenCalled();
      return expect(fs.unlinkSync).toHaveBeenCalledWith(commitFilePath);
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAiZmlsZSI6ICIiLAogICJzb3VyY2VSb290IjogIiIsCiAgInNvdXJjZXMiOiBbCiAgICAiL1VzZXJzL2tzd2VkYmVyZy8uYXRvbS9wYWNrYWdlcy9naXQtcGx1cy9zcGVjL21vZGVscy9naXQtY29tbWl0LWFtZW5kLXNwZWMuY29mZmVlIgogIF0sCiAgIm5hbWVzIjogW10sCiAgIm1hcHBpbmdzIjogIkFBQUE7QUFBQSxNQUFBLDhHQUFBOztBQUFBLEVBQUEsRUFBQSxHQUFLLE9BQUEsQ0FBUSxTQUFSLENBQUwsQ0FBQTs7QUFBQSxFQUNBLElBQUEsR0FBTyxPQUFBLENBQVEsZUFBUixDQURQLENBQUE7O0FBQUEsRUFHQSxHQUFBLEdBQU0sT0FBQSxDQUFRLGVBQVIsQ0FITixDQUFBOztBQUFBLEVBSUEsY0FBQSxHQUFpQixPQUFBLENBQVEsbUNBQVIsQ0FKakIsQ0FBQTs7QUFBQSxFQUtBLE9BTUksT0FBQSxDQUFRLGFBQVIsQ0FOSixFQUNFLFlBQUEsSUFERixFQUVFLHNCQUFBLGNBRkYsRUFHRSxrQkFBQSxVQUhGLEVBSUUsa0JBQUEsVUFKRixFQUtFLG1CQUFBLFdBVkYsQ0FBQTs7QUFBQSxFQWFBLGNBQUEsR0FBaUIsSUFBSSxDQUFDLElBQUwsQ0FBVSxJQUFJLENBQUMsT0FBTCxDQUFBLENBQVYsRUFBMEIsZ0JBQTFCLENBYmpCLENBQUE7O0FBQUEsRUFlQSxRQUFBLENBQVMsZ0JBQVQsRUFBMkIsU0FBQSxHQUFBO0FBQ3pCLElBQUEsVUFBQSxDQUFXLFNBQUEsR0FBQTtBQUNULE1BQUEsS0FBQSxDQUFNLElBQUksQ0FBQyxTQUFYLEVBQXNCLGVBQXRCLENBQXNDLENBQUMsU0FBdkMsQ0FBaUQsV0FBakQsQ0FBQSxDQUFBO0FBQUEsTUFDQSxLQUFBLENBQU0sSUFBSSxDQUFDLFNBQVgsRUFBc0IsTUFBdEIsQ0FBNkIsQ0FBQyxTQUE5QixDQUF3QyxPQUFPLENBQUMsT0FBUixDQUFnQixVQUFoQixDQUF4QyxDQURBLENBQUE7QUFBQSxNQUVBLEtBQUEsQ0FB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

//# sourceURL=/Users/kswedberg/.atom/packages/git-plus/spec/models/git-commit-amend-spec.coffee
