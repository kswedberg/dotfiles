(function() {
  var InsertLinkView;

  InsertLinkView = require("../../lib/views/insert-link-view");

  describe("InsertLinkView", function() {
    var editor, insertLinkView, _ref;
    _ref = [], editor = _ref[0], insertLinkView = _ref[1];
    beforeEach(function() {
      waitsForPromise(function() {
        return atom.workspace.open("empty.markdown");
      });
      return runs(function() {
        insertLinkView = new InsertLinkView({});
        return editor = atom.workspace.getActiveTextEditor();
      });
    });
    describe(".insertLink", function() {
      it("insert inline link", function() {
        var link;
        insertLinkView.editor = {
          setTextInBufferRange: function() {
            return {};
          }
        };
        spyOn(insertLinkView.editor, "setTextInBufferRange");
        link = {
          text: "text",
          url: "http://"
        };
        insertLinkView.insertLink(link);
        return expect(insertLinkView.editor.setTextInBufferRange).toHaveBeenCalledWith(void 0, "[text](http://)");
      });
      it("insert reference link", function() {
        var link;
        spyOn(insertLinkView, "insertReferenceLink");
        link = {
          text: "text",
          title: "this is title",
          url: "http://"
        };
        insertLinkView.insertLink(link);
        return expect(insertLinkView.insertReferenceLink).toHaveBeenCalledWith(link);
      });
      return it("update reference link", function() {
        var link;
        insertLinkView.definitionRange = {};
        spyOn(insertLinkView, "updateReferenceLink");
        link = {
          text: "text",
          title: "this is title",
          url: "http://"
        };
        insertLinkView.insertLink(link);
        return expect(insertLinkView.updateReferenceLink).toHaveBeenCalledWith(link);
      });
    });
    describe(".updateReferenceLink", function() {
      beforeEach(function() {
        return atom.config.set("markdown-writer.referenceIndentLength", 2);
      });
      return it("insert reference and definition", function() {
        var link;
        insertLinkView.referenceId = "ABC123";
        insertLinkView.range = "Range";
        insertLinkView.definitionRange = "DRange";
        insertLinkView.editor = {
          setTextInBufferRange: function() {
            return {};
          }
        };
        spyOn(insertLinkView.editor, "setTextInBufferRange");
        link = {
          text: "text",
          title: "this is title",
          url: "http://"
        };
        insertLinkView.updateReferenceLink(link);
        expect(insertLinkView.editor.setTextInBufferRange.calls[0].args).toEqual(["Range", "[text][ABC123]"]);
        return expect(insertLinkView.editor.setTextInBufferRange.calls[1].args).toEqual(["DRange", '  [ABC123]: http:// "this is title"']);
      });
    });
    describe(".setLink", function() {
      return it("sets all the editors", function() {
        var link;
        link = {
          text: "text",
          title: "this is title",
          url: "http://"
        };
        insertLinkView.setLink(link);
        expect(insertLinkView.textEditor.getText()).toBe(link.text);
        expect(insertLinkView.titleEditor.getText()).toBe(link.title);
        return expect(insertLinkView.urlEditor.getText()).toBe(link.url);
      });
    });
    describe(".getSavedLink", function() {
      beforeEach(function() {
        return insertLinkView.links = {
          "oldstyle": {
            "title": "this is title",
            "url": "http://"
          },
          "newstyle": {
            "text": "NewStyle",
            "title": "this is title",
            "url": "http://"
          }
        };
      });
      it("return undefined if text does not exists", function() {
        return expect(insertLinkView.getSavedLink("notExists")).toEqual(void 0);
      });
      return it("return the link with text, title, url", function() {
        expect(insertLinkView.getSavedLink("oldStyle")).toEqual({
          "text": "oldStyle",
          "title": "this is title",
          "url": "http://"
        });
        return expect(insertLinkView.getSavedLink("newStyle")).toEqual({
          "text": "NewStyle",
          "title": "this is title",
          "url": "http://"
        });
      });
    });
    describe(".isInSavedLink", function() {
      beforeEach(function() {
        return insertLinkView.links = {
          "oldstyle": {
            "title": "this is title",
            "url": "http://"
          },
          "newstyle": {
            "text": "NewStyle",
            "title": "this is title",
            "url": "http://"
          }
        };
      });
      it("return false if the text does not exists", function() {
        return expect(insertLinkView.isInSavedLink({
          text: "notExists"
        })).toBe(false);
      });
      it("return false if the url does not match", function() {
        var link;
        link = {
          text: "oldStyle",
          title: "this is title",
          url: "anything"
        };
        return expect(insertLinkView.isInSavedLink(link)).toBe(false);
      });
      return it("return true", function() {
        var link;
        link = {
          text: "NewStyle",
          title: "this is title",
          url: "http://"
        };
        return expect(insertLinkView.isInSavedLink(link)).toBe(true);
      });
    });
    describe(".updateToLinks", function() {
      beforeEach(function() {
        return insertLinkView.links = {
          "oldstyle": {
            "title": "this is title",
            "url": "http://"
          },
          "newstyle": {
            "text": "NewStyle",
            "title": "this is title",
            "url": "http://"
          }
        };
      });
      it("saves the new link if it does not exists before and checkbox checked", function() {
        var link;
        insertLinkView.saveCheckbox.prop("checked", true);
        link = {
          text: "New Link",
          title: "this is title",
          url: "http://new.link"
        };
        expect(insertLinkView.updateToLinks(link)).toBe(true);
        return expect(insertLinkView.links["new link"]).toEqual(link);
      });
      it("does not save the new link if checkbox is unchecked", function() {
        var link;
        insertLinkView.saveCheckbox.prop("checked", false);
        link = {
          text: "New Link",
          title: "this is title",
          url: "http://new.link"
        };
        return expect(insertLinkView.updateToLinks(link)).toBe(false);
      });
      it("saves the link if it is modified and checkbox checked", function() {
        var link;
        insertLinkView.saveCheckbox.prop("checked", true);
        link = {
          text: "NewStyle",
          title: "this is new title",
          url: "http://"
        };
        expect(insertLinkView.updateToLinks(link)).toBe(true);
        return expect(insertLinkView.links["newstyle"]).toEqual(link);
      });
      it("does not saves the link if it is not modified and checkbox checked", function() {
        var link;
        insertLinkView.saveCheckbox.prop("checked", true);
        link = {
          text: "NewStyle",
          title: "this is title",
          url: "http://"
        };
        return expect(insertLinkView.updateToLinks(link)).toBe(false);
      });
      return it("removes the existed link if checkbox is unchecked", function() {
        var link;
        insertLinkView.saveCheckbox.prop("checked", false);
        link = {
          text: "NewStyle",
          title: "this is title",
          url: "http://"
        };
        expect(insertLinkView.updateToLinks(link)).toBe(true);
        return expect(insertLinkView.links["newstyle"]).toBe(void 0);
      });
    });
    return describe("integration", function() {
      beforeEach(function() {
        atom.config.set("markdown-writer.referenceIndentLength", 2);
        insertLinkView.fetchPosts = function() {
          return {};
        };
        return insertLinkView.loadSavedLinks = function(cb) {
          return cb();
        };
      });
      it("insert new link", function() {
        insertLinkView.display();
        insertLinkView.textEditor.setText("text");
        insertLinkView.urlEditor.setText("url");
        insertLinkView.onConfirm();
        return expect(editor.getText()).toBe("[text](url)");
      });
      it("insert new link with text", function() {
        editor.setText("text");
        insertLinkView.display();
        insertLinkView.urlEditor.setText("url");
        insertLinkView.onConfirm();
        return expect(editor.getText()).toBe("[text](url)");
      });
      it("insert new reference link", function() {
        insertLinkView.display();
        insertLinkView.textEditor.setText("text");
        insertLinkView.titleEditor.setText("title");
        insertLinkView.urlEditor.setText("url");
        insertLinkView.onConfirm();
        return expect(editor.getText()).toBe("[text][" + insertLinkView.referenceId + "]\n\n  [" + insertLinkView.referenceId + "]: url \"title\"");
      });
      it("insert new reference link with text", function() {
        editor.setText("text");
        insertLinkView.display();
        insertLinkView.titleEditor.setText("title");
        insertLinkView.urlEditor.setText("url");
        insertLinkView.onConfirm();
        return expect(editor.getText()).toBe("[text][" + insertLinkView.referenceId + "]\n\n  [" + insertLinkView.referenceId + "]: url \"title\"");
      });
      it("update inline link", function() {
        editor.setText("[text](url)");
        editor.selectAll();
        insertLinkView.display();
        expect(insertLinkView.textEditor.getText()).toEqual("text");
        expect(insertLinkView.urlEditor.getText()).toEqual("url");
        insertLinkView.textEditor.setText("new text");
        insertLinkView.urlEditor.setText("new url");
        insertLinkView.onConfirm();
        return expect(editor.getText()).toBe("[new text](new url)");
      });
      it("update inline link to reference link", function() {
        editor.setText("[text](url)");
        editor.setCursorBufferPosition([0, 0]);
        editor.selectToEndOfLine();
        insertLinkView.display();
        expect(insertLinkView.textEditor.getText()).toEqual("text");
        expect(insertLinkView.urlEditor.getText()).toEqual("url");
        insertLinkView.textEditor.setText("new text");
        insertLinkView.titleEditor.setText("title");
        insertLinkView.urlEditor.setText("new url");
        insertLinkView.onConfirm();
        return expect(editor.getText()).toBe("[new text][" + insertLinkView.referenceId + "]\n\n  [" + insertLinkView.referenceId + "]: new url \"title\"");
      });
      it("update reference link to inline link", function() {
        editor.setText("[text][ABC123]\n\n[ABC123]: url \"title\"");
        editor.setCursorBufferPosition([0, 0]);
        editor.selectToEndOfLine();
        insertLinkView.display();
        expect(insertLinkView.textEditor.getText()).toEqual("text");
        expect(insertLinkView.titleEditor.getText()).toEqual("title");
        expect(insertLinkView.urlEditor.getText()).toEqual("url");
        insertLinkView.textEditor.setText("new text");
        insertLinkView.titleEditor.setText("");
        insertLinkView.urlEditor.setText("new url");
        insertLinkView.onConfirm();
        return expect(editor.getText().trim()).toBe("[new text](new url)");
      });
      it("remove inline link", function() {
        editor.setText("[text](url)");
        editor.setCursorBufferPosition([0, 0]);
        editor.selectToEndOfLine();
        insertLinkView.display();
        expect(insertLinkView.textEditor.getText()).toEqual("text");
        expect(insertLinkView.urlEditor.getText()).toEqual("url");
        insertLinkView.urlEditor.setText("");
        insertLinkView.onConfirm();
        return expect(editor.getText()).toBe("text");
      });
      return it("remove reference link", function() {
        editor.setText("[text][ABC123]\n\n[ABC123]: url \"title\"");
        editor.setCursorBufferPosition([0, 0]);
        editor.selectToEndOfLine();
        insertLinkView.display();
        expect(insertLinkView.textEditor.getText()).toEqual("text");
        expect(insertLinkView.titleEditor.getText()).toEqual("title");
        expect(insertLinkView.urlEditor.getText()).toEqual("url");
        insertLinkView.urlEditor.setText("");
        insertLinkView.onConfirm();
        return expect(editor.getText().trim()).toBe("text");
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAiZmlsZSI6ICIiLAogICJzb3VyY2VSb290IjogIiIsCiAgInNvdXJjZXMiOiBbCiAgICAiL1VzZXJzL2tzd2VkYmVyZy8uYXRvbS9wYWNrYWdlcy9tYXJrZG93bi13cml0ZXIvc3BlYy92aWV3cy9pbnNlcnQtbGluay12aWV3LXNwZWMuY29mZmVlIgogIF0sCiAgIm5hbWVzIjogW10sCiAgIm1hcHBpbmdzIjogIkFBQUE7QUFBQSxNQUFBLGNBQUE7O0FBQUEsRUFBQSxjQUFBLEdBQWlCLE9BQUEsQ0FBUSxrQ0FBUixDQUFqQixDQUFBOztBQUFBLEVBRUEsUUFBQSxDQUFTLGdCQUFULEVBQTJCLFNBQUEsR0FBQTtBQUN6QixRQUFBLDRCQUFBO0FBQUEsSUFBQSxPQUEyQixFQUEzQixFQUFDLGdCQUFELEVBQVMsd0JBQVQsQ0FBQTtBQUFBLElBRUEsVUFBQSxDQUFXLFNBQUEsR0FBQTtBQUNULE1BQUEsZUFBQSxDQUFnQixTQUFBLEdBQUE7ZUFBRyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQWYsQ0FBb0IsZ0JBQXBCLEVBQUg7TUFBQSxDQUFoQixDQUFBLENBQUE7YUFFQSxJQUFBLENBQUssU0FBQSxHQUFBO0FBQ0gsUUFBQSxjQUFBLEdBQXFCLElBQUEsY0FBQSxDQUFlLEVBQWYsQ0FBckIsQ0FBQTtlQUNBLE1BQUEsR0FBUyxJQUFJLENBQUMsU0FBUyxDQUFDLG1CQUFmLENBQUEsRUFGTjtNQUFBLENBQUwsRUFIUztJQUFBLENBQVgsQ0FGQSxDQUFBO0FBQUEsSUFTQSxRQUFBLENBQVMsYUFBVCxFQUF3QixTQUFBLEdBQUE7QUFDdEIsTUFBQSxFQUFBLENBQUcsb0JBQUgsRUFBeUIsU0FBQSxHQUFBO0FBQ3ZCLFlBQUEsSUFBQTtBQUFBLFFBQUEsY0FBYyxDQUFDLE1BQWYsR0FBd0I7QUFBQSxVQUFFLG9CQUFBLEVBQXNCLFNBQUEsR0FBQTttQkFBRyxHQUFIO1VBQUEsQ0FBeEI7U0FBeEIsQ0FBQTtBQUFBLFFBQ0EsS0FBQSxDQUFNLGNBQWMsQ0FBQyxNQUFyQixF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

//# sourceURL=/Users/kswedberg/.atom/packages/markdown-writer/spec/views/insert-link-view-spec.coffee
