(function() {
  var insertAfterCurrentParagraph, insertAtEndOfArticle, removeDefinitionRange, utils, _findFirstEmptyRow, _findFirstNonEmptyRowBackwards, _isReferenceDefinition;

  utils = require("../utils");

  insertAtEndOfArticle = function(editor, text) {
    var point, position, row;
    position = editor.getCursorBufferPosition();
    row = _findFirstNonEmptyRowBackwards(editor, editor.getLastBufferRow());
    point = [row, editor.lineTextForBufferRow(row).length];
    if (_isReferenceDefinition(editor, row)) {
      editor.setTextInBufferRange([point, point], "\n" + text);
    } else {
      editor.setTextInBufferRange([point, point], "\n\n" + text);
    }
    return editor.setCursorBufferPosition(position);
  };

  _findFirstNonEmptyRowBackwards = function(editor, row) {
    while (row >= 0 && editor.lineTextForBufferRow(row).length === 0) {
      row--;
    }
    return row;
  };

  insertAfterCurrentParagraph = function(editor, text) {
    var point, position, row;
    position = editor.getCursorBufferPosition();
    row = _findFirstEmptyRow(editor, position.row + 1);
    point = [row, editor.lineTextForBufferRow(row).length];
    if (_isReferenceDefinition(editor, row)) {
      editor.setTextInBufferRange([point, point], "\n" + text);
    } else if (point[1] > 0) {
      editor.setTextInBufferRange([point, point], "\n\n" + text);
    } else {
      editor.setTextInBufferRange([point, point], "\n" + text + "\n");
    }
    return editor.setCursorBufferPosition(position);
  };

  _findFirstEmptyRow = function(editor, row) {
    var lastRow;
    lastRow = editor.getLastBufferRow();
    while (row <= lastRow && editor.lineTextForBufferRow(row).length !== 0) {
      row++;
    }
    if (row > lastRow) {
      return lastRow;
    }
    while (row < lastRow && _isReferenceDefinition(editor, row + 1)) {
      row++;
    }
    return row;
  };

  _isReferenceDefinition = function(editor, row) {
    var line;
    line = editor.lineTextForBufferRow(row);
    return utils.isReferenceDefinition(line);
  };

  removeDefinitionRange = function(editor, range) {
    var emptyLineAbove, emptyLineBelow, lineNum, _ref, _ref1;
    lineNum = range.start.row;
    emptyLineAbove = !!((_ref = editor.lineTextForBufferRow(lineNum - 1)) != null ? _ref.trim() : void 0);
    emptyLineBelow = !!((_ref1 = editor.lineTextForBufferRow(lineNum + 1)) != null ? _ref1.trim() : void 0);
    editor.setSelectedBufferRange(range);
    editor.deleteLine();
    if (emptyLineAbove && emptyLineBelow) {
      return editor.deleteLine();
    }
  };

  module.exports = {
    insertAtEndOfArticle: insertAtEndOfArticle,
    insertAfterCurrentParagraph: insertAfterCurrentParagraph,
    removeDefinitionRange: removeDefinitionRange
  };

}).call(this);

//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAiZmlsZSI6ICIiLAogICJzb3VyY2VSb290IjogIiIsCiAgInNvdXJjZXMiOiBbCiAgICAiL1VzZXJzL2tzd2VkYmVyZy8uYXRvbS9wYWNrYWdlcy9tYXJrZG93bi13cml0ZXIvbGliL2hlbHBlcnMvaW5zZXJ0LWxpbmstaGVscGVyLmNvZmZlZSIKICBdLAogICJuYW1lcyI6IFtdLAogICJtYXBwaW5ncyI6ICJBQUFBO0FBQUEsTUFBQSwySkFBQTs7QUFBQSxFQUFBLEtBQUEsR0FBUSxPQUFBLENBQVEsVUFBUixDQUFSLENBQUE7O0FBQUEsRUFPQSxvQkFBQSxHQUF1QixTQUFDLE1BQUQsRUFBUyxJQUFULEdBQUE7QUFDckIsUUFBQSxvQkFBQTtBQUFBLElBQUEsUUFBQSxHQUFXLE1BQU0sQ0FBQyx1QkFBUCxDQUFBLENBQVgsQ0FBQTtBQUFBLElBRUEsR0FBQSxHQUFNLDhCQUFBLENBQStCLE1BQS9CLEVBQXVDLE1BQU0sQ0FBQyxnQkFBUCxDQUFBLENBQXZDLENBRk4sQ0FBQTtBQUFBLElBR0EsS0FBQSxHQUFRLENBQUMsR0FBRCxFQUFNLE1BQU0sQ0FBQyxvQkFBUCxDQUE0QixHQUE1QixDQUFnQyxDQUFDLE1BQXZDLENBSFIsQ0FBQTtBQUlBLElBQUEsSUFBRyxzQkFBQSxDQUF1QixNQUF2QixFQUErQixHQUEvQixDQUFIO0FBQ0UsTUFBQSxNQUFNLENBQUMsb0JBQVAsQ0FBNEIsQ0FBQyxLQUFELEVBQVEsS0FBUixDQUE1QixFQUE2QyxJQUFBLEdBQUksSUFBakQsQ0FBQSxDQURGO0tBQUEsTUFBQTtBQUdFLE1BQUEsTUFBTSxDQUFDLG9CQUFQLENBQTRCLENBQUMsS0FBRCxFQUFRLEtBQVIsQ0FBNUIsRUFBNkMsTUFBQSxHQUFNLElBQW5ELENBQUEsQ0FIRjtLQUpBO1dBU0EsTUFBTSxDQUFDLHVCQUFQLENBQStCLFFBQS9CLEVBVnFCO0VBQUEsQ0FQdkIsQ0FBQTs7QUFBQSxFQW1CQSw4QkFBQSxHQUFpQyxTQUFDLE1BQUQsRUFBUyxHQUFULEdBQUE7QUFD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

//# sourceURL=/Users/kswedberg/.atom/packages/markdown-writer/lib/helpers/insert-link-helper.coffee
