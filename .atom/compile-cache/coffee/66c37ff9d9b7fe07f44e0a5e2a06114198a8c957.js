(function() {
  var HEADING_REGEX, JumpTo, REFERENCE_REGEX, TABLE_COL_REGEX, utils;

  utils = require("../utils");

  HEADING_REGEX = /^\#{1,6} +.+$/;

  REFERENCE_REGEX = /\[?([^\s\]]+)(?:\]|\]:)?/;

  TABLE_COL_REGEX = /([^\|]*?)\s*\|/;

  module.exports = JumpTo = (function() {
    function JumpTo(command) {
      this.command = command;
      this.editor = atom.workspace.getActiveTextEditor();
      this.cursor = this.editor.getCursorBufferPosition();
    }

    JumpTo.prototype.trigger = function(e) {
      var fn, range;
      fn = this.command.replace(/-[a-z]/ig, function(s) {
        return s[1].toUpperCase();
      });
      range = this[fn]();
      if (range) {
        return this.editor.setCursorBufferPosition(range);
      } else {
        return e.abortKeyBinding();
      }
    };

    JumpTo.prototype.previousHeading = function() {
      var found, range;
      range = [[0, 0], [this.cursor.row - 1, 0]];
      found = false;
      this.editor.buffer.backwardsScanInRange(HEADING_REGEX, range, function(match) {
        found = match.range.start;
        return match.stop();
      });
      return found;
    };

    JumpTo.prototype.nextHeading = function() {
      var eof, range;
      eof = this.editor.getEofBufferPosition();
      range = this._findNextHeading([[this.cursor.row + 1, 0], [eof.row + 1, 0]]) || this._findNextHeading([[0, 0], [eof.row + 1, 0]]);
      return range;
    };

    JumpTo.prototype._findNextHeading = function(range) {
      var found;
      found = false;
      this.editor.buffer.scanInRange(HEADING_REGEX, range, function(match) {
        found = match.range.start;
        return match.stop();
      });
      return found;
    };

    JumpTo.prototype.referenceDefinition = function() {
      var found, key;
      key = this.editor.getSelectedText() || this.editor.getWordUnderCursor();
      if (!key) {
        return false;
      }
      key = utils.regexpEscape(REFERENCE_REGEX.exec(key)[1]);
      found = false;
      this.editor.buffer.scan(RegExp("\\[" + key + "\\]", "g"), (function(_this) {
        return function(match) {
          var end;
          end = match.range.end;
          if (end.row !== _this.cursor.row) {
            found = [end.row, end.column - 1];
            return match.stop();
          }
        };
      })(this));
      return found;
    };

    JumpTo.prototype.nextTableCell = function() {
      var line;
      line = this.editor.lineTextForBufferRow(this.cursor.row);
      if (utils.isTableRow(line) || utils.isTableSeparator(line)) {
        return this._findNextTableCell(line, this.cursor.row, this.cursor.column);
      } else {
        return false;
      }
    };

    JumpTo.prototype._findNextTableCell = function(currentLine, row, column) {
      var td;
      column = currentLine.indexOf("|", column);
      if (column === -1 || column === currentLine.length - 1) {
        row += 1;
        column = 0;
        currentLine = this.editor.lineTextForBufferRow(row);
      }
      if (utils.isTableSeparator(currentLine)) {
        row += 1;
        column = 0;
        currentLine = this.editor.lineTextForBufferRow(row);
      }
      if (currentLine === void 0) {
        return false;
      }
      if (currentLine[column] === "|") {
        column += 1;
        currentLine = currentLine.slice(column);
      }
      if (td = TABLE_COL_REGEX.exec(currentLine)) {
        return [row, column + td[1].length];
      } else {
        return [row, column + currentLine.length];
      }
    };

    return JumpTo;

  })();

}).call(this);

//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAiZmlsZSI6ICIiLAogICJzb3VyY2VSb290IjogIiIsCiAgInNvdXJjZXMiOiBbCiAgICAiL1VzZXJzL2tzd2VkYmVyZy8uYXRvbS9wYWNrYWdlcy9tYXJrZG93bi13cml0ZXIvbGliL2NvbW1hbmRzL2p1bXAtdG8uY29mZmVlIgogIF0sCiAgIm5hbWVzIjogW10sCiAgIm1hcHBpbmdzIjogIkFBQUE7QUFBQSxNQUFBLDhEQUFBOztBQUFBLEVBQUEsS0FBQSxHQUFRLE9BQUEsQ0FBUSxVQUFSLENBQVIsQ0FBQTs7QUFBQSxFQUVBLGFBQUEsR0FBa0IsZUFGbEIsQ0FBQTs7QUFBQSxFQUdBLGVBQUEsR0FBa0IsMEJBSGxCLENBQUE7O0FBQUEsRUFJQSxlQUFBLEdBQWtCLGdCQUpsQixDQUFBOztBQUFBLEVBTUEsTUFBTSxDQUFDLE9BQVAsR0FDTTtBQUNTLElBQUEsZ0JBQUMsT0FBRCxHQUFBO0FBQ1gsTUFBQSxJQUFDLENBQUEsT0FBRCxHQUFXLE9BQVgsQ0FBQTtBQUFBLE1BQ0EsSUFBQyxDQUFBLE1BQUQsR0FBVSxJQUFJLENBQUMsU0FBUyxDQUFDLG1CQUFmLENBQUEsQ0FEVixDQUFBO0FBQUEsTUFFQSxJQUFDLENBQUEsTUFBRCxHQUFVLElBQUMsQ0FBQSxNQUFNLENBQUMsdUJBQVIsQ0FBQSxDQUZWLENBRFc7SUFBQSxDQUFiOztBQUFBLHFCQUtBLE9BQUEsR0FBUyxTQUFDLENBQUQsR0FBQTtBQUNQLFVBQUEsU0FBQTtBQUFBLE1BQUEsRUFBQSxHQUFLLElBQUMsQ0FBQSxPQUFPLENBQUMsT0FBVCxDQUFpQixVQUFqQixFQUE2QixTQUFDLENBQUQsR0FBQTtlQUFPLENBQUUsQ0FBQSxDQUFBLENBQUUsQ0FBQyxXQUFMLENBQUEsRUFBUDtNQUFBLENBQTdCLENBQUwsQ0FBQTtBQUFBLE1BQ0EsS0FBQSxHQUFRLElBQUUsQ0FBQSxFQUFBLENBQUYsQ0FBQSxDQURSLENBQUE7QUFHQSxNQUFBLElBQUcsS0FBSDtlQUNFLElBQUMsQ0FBQSxNQUFNLENBQUMsdUJB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

//# sourceURL=/Users/kswedberg/.atom/packages/markdown-writer/lib/commands/jump-to.coffee
