Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.getExportsForFiles = getExportsForFiles;
exports.getImportsForEntireFileContent = getImportsForEntireFileContent;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _utilsBufferedNodeProcessExecutorPoolJs = require('../utils/BufferedNodeProcessExecutorPool.js');

var _utilsBufferedNodeProcessExecutorPoolJs2 = _interopRequireDefault(_utilsBufferedNodeProcessExecutorPoolJs);

'use babel';

var Q = require('q');
var path = require('path');
var _ = require('lodash');

var EXPORT_DEFAULT = 'ExportDefaultDeclaration';
var EXPORT_NAMED = 'ExportNamedDeclaration';
var IMPORT_DEFAULT = 'ImportDefaultSpecifier';
var IMPORT_DECLARATION = 'ImportDeclaration';
var IMPORT_DEFAULT_SPECIFIER = 'ImportDefaultSpecifier';
var IMPORT_NAMESPACE_SPECIFIER = 'ImportNamespaceSpecifier';
var VARIABLE_DECLARATION = 'VariableDeclaration';
var FULFILLED_PROMISE = 'fulfilled';

var nodeProcessExecutor = new _utilsBufferedNodeProcessExecutorPoolJs2['default']();

function callAstServer(args) {
  return nodeProcessExecutor.execute(path.resolve(__dirname, './AstServer.js'), args);
}

function getExportsForFiles(files) {
  return Q.allSettled(files.map(function (file) {
    return callAstServer([file]);
  })).then(function (promises) {

    promises.filter(function (response) {
      return response.state !== FULFILLED_PROMISE;
    }).forEach(function (response) {
      console.error('Couldn\'t process for export index - ' + response.reason.args[0], response.reason);
    });

    return _.flatten(promises.filter(function (response) {
      return response.state === FULFILLED_PROMISE;
    }).filter(function (response) {
      return response.value.data !== '';
    }).map(function (response) {
      var file = response.value.args[0];

      var data = undefined;
      try {
        data = JSON.parse(response.value.data);
      } catch (ex) {
        data = { body: [] };
      }

      return _.flatten(data.body.filter(function (astRecord) {
        return (astRecord.type === EXPORT_NAMED || astRecord.type === EXPORT_DEFAULT) && astRecord.declaration;
      }).map(function (astRecord) {
        if (astRecord.type === EXPORT_DEFAULT) {
          if (!astRecord.declaration.id) {
            var importedFileName = path.basename(file);

            // Default export without name
            return {
              text: importedFileName.replace(path.extname(importedFileName), ''),
              file: file,
              type: astRecord.declaration.type,
              def: true
            };
          } else {
            // Default export with name
            return {
              text: astRecord.declaration.id.name,
              file: file,
              type: astRecord.declaration.type,
              def: true
            };
          }
        } else {
          // Named export for variables
          if (astRecord.declaration.type === VARIABLE_DECLARATION) {
            return _.map(astRecord.declaration.declarations, function (declaration) {
              return {
                text: declaration.id.name,
                file: file,
                type: declaration.type,
                def: false
              };
            });
          } else {
            // Named export other than variables
            return {
              text: astRecord.declaration.id.name,
              file: file,
              type: astRecord.declaration.type,
              def: false
            };
          }
        }
      })).filter(function (record) {
        return record.text;
      });
    }));
  });
}

function getImportsForEntireFileContent(content, version) {
  return callAstServer(['--no-file', content]).then(function (response) {
    var imports = JSON.parse(response.data).body.filter(function (record) {
      return record.type === IMPORT_DECLARATION;
    }).map(function (record) {
      return {
        file: record.source.value,
        specifiers: record.specifiers.map(function (specifier) {
          var textImported = undefined;
          if (specifier.type !== IMPORT_NAMESPACE_SPECIFIER) {
            textImported = specifier.imported ? specifier.imported.name : specifier.local.name;
          } else {
            textImported = '*';
          }

          return {
            textLocal: specifier.local.name,
            textImported: textImported,
            def: specifier.type === IMPORT_DEFAULT_SPECIFIER || specifier.type === IMPORT_NAMESPACE_SPECIFIER
          };
        })
      };
    });

    return {
      imports: imports,
      version: version
    };
  });
}
//# sourceMappingURL=data:application/json;base64,
//# sourceURL=/Users/kswedberg/.atom/packages/js-autoimport/lib/ast/AstProvider.js
