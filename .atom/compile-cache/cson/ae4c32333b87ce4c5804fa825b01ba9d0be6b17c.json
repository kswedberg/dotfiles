{".source.js":{"$.each":{"prefix":"eachobj","body":"each(${1:array/object}, function(${2:index}${3:, ${4:val}}) {\n\t${0://iterate through array or object}\n});"},"$.extend":{"prefix":"extendjq","body":"extend(${1:true, }${2:target object}, ${3:object1});\n$0"},"$.inArray":{"prefix":"inArrayjq","body":"inArray(${1:value}, ${2:array})$0"},"$.isEmptyObject":{"prefix":"isEmptyObject","body":"isEmptyObject('${1:object}')$0"},"$.isPlainObject":{"prefix":"isPlainObject","body":"isPlainObject('${1:object}')$0"},"$.isWindow":{"prefix":"isWindow","body":"isWindow('${1:object}')$0"},"$.map":{"prefix":"mapUtil","body":"$.map(${1:array}, function(${2:item}${3:, ${4:index}}) {\n\t${5:return ${6:something};}\n});"},"$.merge":{"prefix":"mergejq","body":"merge(${1:array1}, ${2:array2})$0"},"$.noop":{"prefix":"noop","body":"noop()${0:;}${1:}"},"$.parseJSON":{"prefix":"parseJSON","body":"parseJSON(${1:json})$0"},"$.parseXML":{"prefix":"parseXML","body":"parseXML(${1:data})$0"},"$.trim":{"prefix":"trim","body":"trim(${1:'${2:string}'})$0"},"$.type":{"prefix":"type","body":"type(${1:object})$0"},"$.unique":{"prefix":"uniquejq","body":"$.unique(${1:DOMelementArray})$0"}}}