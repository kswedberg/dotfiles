{".source.js":{"plugin (animation)":{"prefix":"plugin","body":"jQuery.fn.${1:myeffect} = function(speed, easing, callback) {\n  return this.animate({${2:param1}: ${3:'value'}}, speed, easing, callback);\n};"},"plugin (method extras)":{"prefix":"plugin","body":"// jQuery ${1:pluginName} Plugin\n(function( $ ) {\n  var settings = {\n    ${30:}\n  };\n\n  var methods = {\n    init: function( options ) {\n\n      this.each(function() {\n        var data, dataId, opts,\n            ${10:$this} = $(this);\n\n        $10.$1('options', options);\n        data = $10.data('$1') || {};\n        opts = data.options;\n\n        // If the plugin hasn't been initialized yet\n        if ( !data.$1 ) {\n          dataId = +new Date;\n\n          data = {\n            $1: true,\n            options: opts,\n            id: dataId\n          };\n\n          ${14:\n          // create element and append to body\n          var $$1 = $('<div />', {\n            'class': '$1'\n          \\}).appendTo( 'body' );\n\n          // Associate created element with invoking element\n          $$1.data( '$1', {target: $10, id: dataId\\} );\n          // And vice versa\n          data.$1 = $$1;\n}\n          $10.data('$1', data);\n        } // !data.$1\n\n        $0\n\n      });\n\n      return this;\n    },\n    destroy: function( ) {\n\n      this.each(function() {\n\n        var $10 = $(this),\n            data = $10.data( '$1' );\n\n        // Remove created elements, unbind namespaced events, and remove data\n        $(document).unbind( '.$1' );\n        data.$1.remove();\n        $10.unbind( '.$1' )\n        .removeData( '$1' );\n\n      });\n\n      return this;\n    },\n    options: function( options ) {\n\n      this.each(function() {\n        var $10 = $(this),\n            // don't use our getData() function here\n            // because we want an object regardless\n            data = $10.data( '$1' ) || {},\n            opts = data.options || {};\n\n        // deep extend (merge) default settings, per-call options, and options set with:\n        // html10 data-$1 options JSON and $('selector').$1( 'options', {} );\n        opts = $.extend( true, {}, $.fn.$1.defaults, opts, options || {} );\n        data.options = opts;\n        $.data( this, '$1', data );\n      });\n\n      return this;\n    }${20/(.+)/(?1:,\n    :)/}${20:someOtherMethod}${20/(.+)/(?1:\\: function\\(\\) {\n\n    }:)/}\n  };\n\n  var protoSlice = Array.prototype.slice;\n\n  $.fn.$1 = function( method ) {\n\n    if ( methods[method] ) {\n      return methods[method].apply( this, protoSlice.call( arguments, 1 ) );\n    } else if ( typeof method === 'object' || ! method ) {\n      return methods.init.apply( this, arguments );\n    } else {\n      $.error( 'Method ' +  method + ' does not exist on jQuery.fn.$1' );\n    }\n\n  };\n\n  $.extend($.fn.$1, {\n    defaults: settings\n  });\n\n  function getData(el) {\n    var $1, opts,\n        $10 = $(el),\n        data = $10.data( '$1' ) || {};\n\n    if (!data.$1) { return false; }\n\n    return data;\n  }\n\n})( jQuery );\n"},"plugin (selector)":{"prefix":"plugin","body":"(function($) {\n  $.extend($.expr[':'], {\n    ${1:selectorName}: function(element, index, matches, set) {\n      $0\n      return something;\n    }\n  });\n})(jQuery);\n"},"plugin (method basic)":{"prefix":"plugin","body":"(function($) {\n${2:// ${3:What does the $1 plugin do?}}\n$.fn.${1:pluginName} = function(options) {\n\n  if (!this.length) { return this; }\n\n  var opts = $.extend(${5:true, }{}, $.fn.$1.defaults, options);\n\n  this.each(function() {\n    var ${6:$this} = $(this);\n    $0\n  });\n\n  return this;\n};\n\n// default options\n$.fn.$1.defaults = {\n  ${4:defaultOne: true,\n  defaultTwo: false,\n  defaultThree: 'yay!'}\n};\n\n})(jQuery);\n"}}}