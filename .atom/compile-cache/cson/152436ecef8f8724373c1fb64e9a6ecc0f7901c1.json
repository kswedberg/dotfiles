{"fileTypes":["twig","html.twig"],"firstLineMatch":"\\{\\%( |-)?extends","name":"Craft (Twig)","patterns":[{"begin":"(?x)   # Enable free spacing mode\n\t\t\t         \\{\\#   # Opening curly brace and hash tag\n","captures":{"0":{"name":"punctuation.definition.tag.comment.twig"}},"comment":"{# Comment Block #}","end":"(?x)   # Enable free spacing mode\n\t\t\t\t   \\#\\}   # Closing curly brace and hash tag\n","name":"comment.block.twig"},{"begin":"(?x)   # Enable free spacing mode\n\t\t\t         \\{\\%   # Opening curly brace and percent sign\n","captures":{"0":{"name":"punctuation.definition.tag.expression.twig"}},"comment":"{% Expression / Action Tags %}","end":"(?x)   # Enable free spacing mode\n\t\t\t\t   \\%\\}   # Closing curly brace and percent sign\n","name":"meta.tag.expression.twig","patterns":[{"include":"#twig-tags"},{"include":"#twig-filters"},{"include":"#twig-functions"},{"include":"#twig-constants-language"},{"include":"#twig-constants-numeric"},{"include":"#twig-operators-comparison"},{"include":"#twig-operators-logical"},{"include":"#twig-operators-bitwise"},{"include":"#twig-operators-assignment"},{"include":"#twig-operators-arithmetic"},{"include":"#string-single-quoted"},{"include":"#string-double-quoted"},{"include":"#twig-parameters"},{"include":"#twig-tests"},{"include":"#twig-macro"},{"include":"#twig-arrays-hashes"},{"include":"#twig-parentheses"}]},{"begin":"(?x)   # Enable free spacing mode\n\t\t\t         \\{\\{   # Opening double curly braces\n","captures":{"0":{"name":"punctuation.definition.tag.output.twig"}},"comment":"{{ Output / Variable Tags }}","end":"(?x)   # Enable free spacing mode\n\t\t\t\t   \\}\\}   # Closing double curly braces\n","name":"meta.tag.output.twig","patterns":[{"include":"#twig-tags"},{"include":"#twig-filters"},{"include":"#twig-functions"},{"include":"#twig-constants-language"},{"include":"#twig-constants-numeric"},{"include":"#twig-operators-comparison"},{"include":"#twig-operators-logical"},{"include":"#twig-operators-bitwise"},{"include":"#twig-operators-assignment"},{"include":"#twig-operators-arithmetic"},{"include":"#string-single-quoted"},{"include":"#string-double-quoted"},{"include":"#twig-parameters"},{"include":"#twig-tests"},{"include":"#twig-arrays-hashes"},{"include":"#twig-parentheses"}]},{"include":"text.html.basic"},{"begin":"(?ix)   # Enable free spacing mode, case insensitive\n\t\t\t         (?<=\\{\\%\\sincludecss\\s\\%\\}|\\{\\%\\sincludehirescss\\s\\%\\})\n","comment":"Add CSS support to set tags that use the pattern \"css\" in their name","end":"(?ix)(?=\\{\\%\\sendincludecss\\s\\%\\}|\\{\\%\\sendincludehirescss\\s\\%\\})","name":"source.css.embedded.twig","patterns":[{"include":"source.css"}]},{"begin":"(?ix)   # Enable free spacing mode, case insensitive\n\t\t\t         # Make sure our opening includejs tag has word boundaries\n\t\t\t         (?<=\\{\\%\\sincludejs\\s\\%\\})\n","comment":"Add JS support to set tags that use the pattern \"css\" in their name","end":"(?ix)(?=\\{\\%\\sendincludejs\\s\\%\\})","name":"source.js.embedded.twig","patterns":[{"include":"source.js"}]}],"repository":{"entities":{"patterns":[{"captures":{"1":{"name":"punctuation.definition.entity.html"},"3":{"name":"punctuation.definition.entity.html"}},"comment":"HTML Entities","match":"(&)([a-zA-Z0-9]+|#[0-9]+|#x[0-9a-fA-F]+)(;)","name":"constant.character.entity.html"},{"match":"&","name":"invalid.illegal.bad-ampersand.html"}]},"string-double-quoted":{"begin":"\"","beginCaptures":{"0":{"name":"punctuation.definition.string.begin.twig"}},"comment":"Double Quoted String. The \"contentName\" value below is just to allow the usage of “select scope” to select the string contents first, then the string with quotes","contentName":"meta.string-contents.quoted.double.twig","end":"\"","endCaptures":{"0":{"name":"punctuation.definition.string.end.twig"}},"name":"string.quoted.double.twig","patterns":[{"include":"#entities"}]},"string-single-quoted":{"begin":"'","beginCaptures":{"0":{"name":"punctuation.definition.string.begin.twig"}},"comment":"Single Quoted String. The \"contentName\" value below is just to allow the usage of “select scope” to select the string contents first, then the string with quotes","contentName":"meta.string-contents.quoted.single.php","end":"'","endCaptures":{"0":{"name":"punctuation.definition.string.end.twig"}},"name":"string.quoted.single.twig","patterns":[{"include":"#entities"}]},"twig-arrays-hashes":{"begin":"(\\{|\\[)","captures":{"0":{"name":"punctuation.section.twig"}},"end":"(\\}|\\])","name":"punctuation.section.twig","patterns":[{"include":"#twig-tags"},{"include":"#twig-filters"},{"include":"#twig-functions"},{"include":"#twig-constants-language"},{"include":"#twig-constants-numeric"},{"include":"#twig-operators-comparison"},{"include":"#twig-operators-logical"},{"include":"#twig-operators-bitwise"},{"include":"#twig-operators-assignment"},{"include":"#twig-operators-arithmetic"},{"include":"#string-single-quoted"},{"include":"#string-double-quoted"},{"include":"#twig-parameters"},{"include":"#twig-tests"},{"include":"#twig-arrays-hashes"},{"include":"#twig-parentheses"},{"comment":"Highlight commas and colons within the array","match":",|:","name":"punctuation.separator.twig"},{"begin":"(?ix) # Enable free spacing mode\n\t\t\t\t\t         (?<![-a-z])(?=[-a-z])\\w+\\s?(?=:)  # I do not understand this but copied it from the css grammar and added the check for word characters and a colon\n","comment":"Highlight they keys in our arrays/hashes","end":"$|(?![-a-z])","name":"support.type.argument.twig"},{"begin":"(?ix) # Enable free spacing mode\n\t\t\t\t\t         (?<![-0-9])(?=[-0-9])\\w+\\b  # I do not understand this but copied it from the css grammar and added the check for word characters and a colon, and swapped in numbers for letters\n","comment":"Highlight numbered keys as numbers","end":"$|(?![-0-9])","name":"constant.numeric.twig"}]},"twig-constants-language":{"comment":"Twig Constants: true|false|null|none","match":"(?ix) # Enable free spacing mode, ignore case\n\t\t\t         (?<= # Positive lookbehind. Our match comes after any of the following:\n\t\t\t\t\t\t[\\s\\[\\(\\{:,]\n\t\t\t\t\t )\n\t\t\t\t\t (?:\n\t\t\t\t\t\t # Twig Constants\n\t\t\t\t\t\t true|false|null|none\n\t\t\t\t\t )\n\t\t\t\t\t (?=[\\s\\)\\]\\}\\,]) # Positive lookahead: for the same as above (except colon)\n","name":"constant.language.twig"},"twig-constants-numeric":{"comment":"Digits.","match":"(?x) # Enable free spacing mode\n\t\t\t\t\t [[:digit:]]+\n","name":"constant.numeric.twig"},"twig-filters":{"comment":"Twig Filters. We separate this repository pattern from twig-functions because people can add arbitrary filters in their plugins and we want to catch all of those.","match":"(?x) # Enable free spacing mode\n\n\t\t\t\t\t(     # Match all filters with a pipe character in front of them\n\t\t\t     \\s?  # optional space\n\t\t\t\t\t (\\|) # a pipe character\n\t\t\t\t\t \\s?  # optional space\n\t\t\t\t\t \\b   # word boundary\n\t\t\t\t\t (\n\t\t\t\t\t\t(?!\\d)  # make sure our filter does not begin with a number\n\t\t\t\t\t  [\\w]+ # any number of word characters\n\t\t\t\t\t )\n\t\t\t\t\t \\b   # word boundary\n\t\t\t\t  )\n\t\t\t\t\t|\n\t\t\t\t\t(     # Match all filters that appear after the filter block tag keyword\n\t\t\t\t\t (?<=filter\\s) # Postive Lookbehind: Keyword \"filter\" and a space\n\t\t\t\t\t \\b   # word boundary\n\t\t\t\t\t ([\\w]+) # any number of word characters\n\t\t\t\t\t \\b   # word boundary\n\t\t\t\t    )\n","name":"support.function.filters.twig"},"twig-functions":{"begin":"(?x) # Enable free spacing mode\n\t\t\t         (?<= # Positive lookbehind. Our match comes after any of the following:\n\t\t\t\t\t\t[\\s\\[\\(\\{:,]\n\t\t\t\t\t )\n\t\t\t\t\t (\n\t\t\t\t\t\t # Make sure we explicitly try to match any supported functions\n\t\t\t\t\t\t (\n\t\t\t\t\t\t # Supported Twig Functions\n\t\t\t\t\t\t attribute|block|constant|cycle|date|divisible\\sby|divisibleby|dump|include|max|min|parent|random|range|same\\sas|source|template_from_string|\n\n\t\t\t\t\t\t # Supported Twig Filters (Filters are functions too!)\n\t\t\t\t\t\t abs|batch|capitalize|convert_encoding|date|date_modify|default|e(?:scape)?|first|format|join|(?:json|url)_encode|keys|last|length|lower|merge|nl2br|number_format|raw|replace|reverse|round|slice|sort|split|striptags|title|trim|upper|\n\n\t\t\t\t\t\t # Craft Twig Functions\n\t\t\t\t\t\t ciel|floor|getCsrfInput|getFootHtml|getHeadHtml|max|min|round|shuffle|url|\n\n\t\t\t\t\t\t # Craft Twig Filters\n\t\t\t\t\t\t currency|datetime|filesize|filter|group|indexOf|intersect|lcfirst|markdown|md|number|parseRefs|percentage|replace|translate|t|ucfirst|ucwords|without\n\t\t\t\t\t\t)\n\t\t\t\t\t\t|\n\t\t\t\t\t\t# Also try to match any word at the start of one of our tags that is followed by a parenthesis\n\t\t\t\t\t\t\\w+\n\t\t\t\t\t)\n\t\t\t\t\t(\n\t\t\t\t\t\t\\( # Open parenthesis\n\t\t\t\t\t)\n","beginCaptures":{"2":{"name":"support.function.functions.twig"},"3":{"name":"punctuation.section.twig"}},"comment":"Twig functions with arguments. And an attempt to be a bit more broad and match any word that might be a custom function.","end":"(?x) # Enable free spacing mode\n\t\t\t       (\\)) # Close parenthesis\n","endCaptures":{"1":{"name":"punctuation.section.twig"}},"name":"support.function.functions.twig","patterns":[{"include":"#twig-tags"},{"include":"#twig-filters"},{"include":"#twig-functions"},{"include":"#twig-constants-language"},{"include":"#twig-constants-numeric"},{"include":"#twig-operators-comparison"},{"include":"#twig-operators-logical"},{"include":"#twig-operators-bitwise"},{"include":"#twig-operators-assignment"},{"include":"#twig-operators-arithmetic"},{"include":"#string-single-quoted"},{"include":"#string-double-quoted"},{"include":"#twig-parameters"},{"include":"#twig-tests"},{"include":"#twig-arrays-hashes"},{"include":"#twig-parentheses"},{"comment":"Variables within function that do not match any of the above patterns.","match":"(?x) # Enable free spacing mode\n\t\t\t\t\t         \\w\\.* # Match any number of word characters and dots\n","name":"support.other.variable"}]},"twig-macro":{"comment":"Macro Function name","match":"(?x) # Enable free spacing mode\n\t\t\t   \t\t (?<=[^(?:end)]macro) # Positive lookbehind for the opening macro tag\n\t\t\t\t\t \\s+ # Any number of spaces\n\t\t\t\t\t (\\b.*)  # Our function\n\t\t\t\t\t (?=\\s?\\() # Positive lookahead for open parenthesis\n","name":"entity.name.function.twig"},"twig-operators-arithmetic":{"comment":"Twig Operators","match":"(?x) # Enable free spacing mode\n\t\t\t\t\t (\\+|-|\\*|/|%|//|\\*\\*)\n","name":"keyword.operator.arithmetic.twig"},"twig-operators-assignment":{"comment":"Twig Operators","match":"(?x) # Enable free spacing mode\n\t\t\t         (=|~)\n","name":"keyword.operator.assignment.twig"},"twig-operators-bitwise":{"comment":"Twig Operators","match":"(?x) # Enable free spacing mode\n\t\t\t         (&|\\||\\^)\n","name":"keyword.operator.bitwise.twig"},"twig-operators-comparison":{"comment":"Twig Operators","match":"(?x) # Enable free spacing mode\n\t\t\t         (!=|==|<|<=|>|>=)\n\t\t\t\t\t |\n\t\t\t\t\t \\b(is|in|starts\\swith|ends\\swith)\\b\n","name":"keyword.operator.comparison.twig"},"twig-operators-logical":{"comment":"Twig Operators","match":"(?x) # Enable free spacing mode\n\t\t\t         \\b\n\t\t\t\t\t (\n\t\t\t\t\t\t # Logical Operators\n\t\t\t\t\t\t not|or|and|\n\n\t\t\t\t\t\t # Ternary Operators\n\t\t\t\t\t\t \\?|:\n\t\t\t\t\t )\n\t\t\t\t\t \\b\n","name":"keyword.operator.logical.twig"},"twig-parameters":{"comment":"Twig Tags - non primary tags that do not match if we have them in the twig-tags repository","match":"(?x) # Enable free spacing mode\n\t\t\t         \\b   # Word boundary\n\t\t\t\t\t (\n\t\t\t\t\t\t # Default Supporting Tags\n\t\t\t\t\t\t as|do|else|elseif|ignore\\smissing|only|with|with_context\n\t\t\t\t\t )\n\t\t\t\t\t \\b # Word boundary\n","name":"entity.name.tag.twig"},"twig-parentheses":{"comment":"Parentheses.","match":"(?x) # Enable free spacing mode\n\t\t\t     (\\(|\\))\n","name":"punctuation.section.twig"},"twig-tags":{"comment":"Twig Tags opening and closing","match":"(?x) # Enable free spacing mode\n\t\t\t         \\b   # Word boundary\n\t\t\t\t\t\t\t (?:end)? # Match the \"end\" version of each tag too\n\t\t\t\t\t\t\t (\n\t\t\t\t\t\t\t\t (      # ?: provides grouping without capturing\n\n\t\t\t\t\t\t\t\t\t # Default Twig Tags\n\t\t\t\t\t\t\t\t\t autoescape|do|embed|extends|filter|flush|for|from|if|import|include|macro|sandbox|set|spaceless|use|verbatim|\n\n\t\t\t\t\t\t\t\t\t # Craft Twig Tags\n\t\t\t\t\t\t\t\t\t cache|case|default|exit|header|includecss|includeCss|includeCssFile|includehirescss|includeHiResCss|includejs|includeJs|includeJsFile|nav|paginate(?!\\.)|redirect|requireLogin|requirePermission|switch\n\t\t\t\t\t\t\t\t )\n\t\t\t\t\t\t\t )\n\t\t\t\t\t\t\t (?!\\() # Negative lookahead for parenthesis, to make sure this is not a Twig function\n\t\t\t\t\t\t\t \\b # Word boundary\n\t\t\t\t\t\t\t |\n\t\t\t\t\t\t\t # handle the block tag separately, because we want to avoid\n\t\t\t\t\t\t\t # things like for block in matrixField and block.type\n\n\t\t\t\t\t\t\t # Only match the opening block tag if it is preceded by an action tag\n\t\t\t\t\t\t\t (?<=\\{\\%\\s)block\n\t\t\t\t\t\t\t |\n\t\t\t\t\t\t\t # match the endblock tag explicitly\n\t\t\t\t\t\t\t endblock\n","name":"entity.name.tag.twig"},"twig-tests":{"comment":"Twig Tests","match":"(?x) # Enable free spacing mode\n\n\t\t\t\t\t # Positive lookbehind: Tests start with \"is\"\n\t\t\t\t\t (?<=is\\s)\n\n\t\t\t\t\t # Twig Tests\n\t\t\t\t\t (constant|defined|divisible\\s?by|empty|even|iterable|none|null|odd|same\\s?as)\n","name":"support.function.tests.twig"}},"scopeName":"text.html.twig"}