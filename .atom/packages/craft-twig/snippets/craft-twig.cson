".text.html.twig":
  "craft.assets":
    prefix: "assets"
    body: '''
      {% for image in craft.assets.
      	.sourceId('${1:1}')
        .kind('${2:image}')
        .limit(${3:10})
      }) %}
          <img src="{{ image.url${4:('${5:thumb}')} }}" width="${6:200}" height="${7:200}" alt="{{ image.title }}">
      {% endfor %}
      $0
    '''
  "block (block)":
    prefix: "blockb"
    body: '''
      {% block ${1:name} %}
          $0
      {% endblock %}
    '''
  block:
    prefix: "block"
    body: "{% block ${1:name} %}$0{% endblock %}"
  ciel:
    prefix: "ciel"
    body: "ceil($1)$0"
  "craft.assets w/ params":
    prefix: "assetsp"
    body: '''
      {% set assets = craft.assets.find({
        sourceId:  	'${1:1}',
        kind:      	'${2:image}',
        limit: 			${3:10}
      }) %}

      {% for image in assets %}
          <img src="{{ image.url${4:('${5:thumb}')} }}" width="${6:200}" height="${7:200}" alt="{{ image.title }}">
      {% endfor %}
      $0
    '''
  "craft.categories w/ params":
    prefix: "categoriesp"
    body: '''
      {% set categories = craft.categories.find({
        group:    '${1:categoryGroupHandle',
        limit:      '${2:10}'
      }) %}

      <ul>
          {% nav category in categories %}
              <li>
                  <a href="{{ category.url }}">{{ category.title }}</a>
                  {% ifchildren %}
                      <ul>
                          {% children %}
                      </ul>
                  {% endifchildren %}
              </li>
          {% endnav %}
      </ul>
    '''
  "craft.categories":
    prefix: "categories"
    body: '''
      <ul>
          {% nav category in craft.categories
      			 .group('categoryGroupHandle',')
      			 .limit(10)
      			 %}
              <li>
                  <a href="{{ category.url }}">{{ category.title }}</a>
                  {% ifchildren %}
                      <ul>
                          {% children %}
                      </ul>
                  {% endifchildren %}
              </li>
          {% endnav %}
      </ul>
    '''
  "info: craft.config":
    prefix: "info"
    body: '''
      {# Access any settings in craft/config/general.php #}
      {% if craft.config.devMode %}{% endif %}

      {# Access settings in any config file #}
      {{ craft.config.get('someConfigSetting', 'someConfigFile') }}

      {# General Settings #}
      {{ craft.config.appId }}
      {{ craft.config.cacheDuration }}
      {{ craft.config.cacheMethod }}
      {{ craft.config.customAsciiCharMappings }} {# array #}
      {{ craft.config.defaultCookieDomain }}
      {{ craft.config.devMode }}
      {{ craft.config.environmentVariables }} {# array #}
      {{ craft.config.isSystemOn }}
      {{ craft.config.logDumpMethod }}
      {{ craft.config.overridePhpSessionLocation }}
      {{ craft.config.phpMaxMemoryLimit }}
      {{ craft.config.runTasksAutomatically }}
      {{ craft.config.searchIgnoreWords }} {# array #}
      {{ craft.config.siteName }} {# can be an array #}
      {{ craft.config.siteUrl }} {# can be an array #}
      {{ craft.config.timezone }}
      {{ craft.config.translationDebugOutput }}
      {{ craft.config.useCompressedJs }}
      {{ craft.config.useWriteFileLock }}
      {{ craft.config.useXSendFile }}

      {# Security Settings #}
      {{ craft.config.csrfTokenName }}
      {{ craft.config.defaultFilePermissions }}
      {{ craft.config.defaultFolderPermissions }}
      {{ craft.config.defaultTokenDuration }}
      {{ craft.config.enableCsrfProtection }}
      {{ craft.config.tokenParam }}
      {{ craft.config.useSecureCookies }}

      {# Updates Settings #}
      {{ craft.config.allowAutoUpdates }}
      {{ craft.config.backupDbOnUpdate }}
      {{ craft.config.restoreDbOnUpdateFailure }}

      {# URL Settings #}
      {{ craft.config.actionTrigger }}
      {{ craft.config.addTrailingSlashesToUrls }}
      {{ craft.config.allowUppercaseInSlug }}
      {{ craft.config.baseCpUrl }}
      {{ craft.config.cpTrigger }}
      {{ craft.config.limitAutoSlugsToAscii }}
      {{ craft.config.maxSlugIncrement }}
      {{ craft.config.omitScriptNameInUrls }}
      {{ craft.config.pageTrigger }}
      {{ craft.config.resourceTrigger }}
      {{ craft.config.slugWordSeparator }}
      {{ craft.config.usePathInfo }}

      {# Templating Settings #}
      {{ craft.config.cacheElementQueries }}
      {{ craft.config.defaultTemplateExtensions }} {# array #}
      {{ craft.config.errorTemplatePrefix }}
      {{ craft.config.indexTemplateFilenames }}
      {{ craft.config.privateTemplateTrigger }}

      {# Users Settings #}
      {{ craft.config.activateAccountFailurePath }}
      {{ craft.config.activateAccountSuccessPath }}
      {{ craft.config.autoLoginAfterAccountActivation }}
      {{ craft.config.blowfishHashCost }}
      {{ craft.config.cooldownDuration }}
      {{ craft.config.invalidLoginWindowDuration }}
      {{ craft.config.invalidUserTokenPath }}
      {{ craft.config.loginPath }}
      {{ craft.config.logoutPath }}
      {{ craft.config.maxInvalidLogins }}
      {{ craft.config.postCpLoginRedirect }}
      {{ craft.config.postLoginRedirect }}
      {{ craft.config.purgePendingUsersDuration }}
      {{ craft.config.rememberUsernameDuration }}
      {{ craft.config.rememberedUserSessionDuration }}
      {{ craft.config.requireMatchingUserAgentForSession }}
      {{ craft.config.requireUserAgentAndIpForSession }}
      {{ craft.config.setPasswordPath }}
      {{ craft.config.setPasswordSuccessPath }}
      {{ craft.config.testToEmailAddress }}
      {{ craft.config.useEmailAsUsername }}
      {{ craft.config.userSessionDuration }}
      {{ craft.config.verificationCodeDuration }}

      {# Assets Settings #}
      {{ craft.config.allowedFileExtensions }}
      {{ craft.config.defaultImageQuality }}
      {{ craft.config.extraAllowedFileExtensions }}
      {{ craft.config.filenameWordSeparator }}
      {{ craft.config.generateTransformsBeforePageLoad }}
      {{ craft.config.imageDriver }}
      {{ craft.config.maxCachedCloudImageSize }}
      {{ craft.config.maxUploadFileSize }}
      {{ craft.config.rotateImagesOnUploadByExifData }}
      {{ craft.config.generateTransformsBeforePageLoad }}

      $0


    '''
  "craft.entries w/ params":
    prefix: "entriesp"
    body: '''
      {% set entries = craft.entries.find({
        section:    '${1:sectionName}',
        limit:      '${2:10}'
      }) %}

      {% for entry in entries %}
        <a href="{{ entry.url }}">{{ entry.title }}</a>
      {% endfor %}
      $0
    '''
  "craft.entries":
    prefix: "entries"
    body: '''
      {% for entry in craft.entries
      	.section('${1:sectionName}')
      	.limit(${2:10})
      	%}
        <a href="{{ entry.url }}">{{ entry.title }}</a>
      {% endfor %}
      $0
    '''
  feed:
    prefix: "feed"
    body: '''
      {% set feedUrl = "${1:http://feeds.feedburner.com/blogandtonic}" %}
      {% set limit = ${2:10} %}
      {% set items = craft.feeds.getFeedItems(feedUrl, limit) %}

      {% for item in items %}
          <article>
              <h3><a href="{{ item.permalink }}">{{ item.title }}</a></h3>
              <p class="author">{{ item.authors[0].name }}</p>
              <p class="date">{{ item.date }}</p>

              {{ item.summary }}
          </article>
      {% endfor %}
    '''
  "info: craft.fields":
    prefix: "info"
    body: '''
      {% set body = craft.fields.getFieldByHandle('body') %}
      {{ body.instructions }}
    '''
  "info: craft.globals":
    prefix: "info"
    body: '''
      {% set globals = craft.globals.getAllSets() %}
      {% set globals = craft.globals.getEditableSets() %}
      {% set globals = craft.globals.getTotalSets() %}
      {% set globals = craft.globals.getTotalEditableSets() %}
      {% set globalSet = craft.globals.getSetById( id, locale ) %}
      {% set globalSet = craft.globals.getSetByHandle( handle, locale ) %}
    '''
  "info: craft.sections":
    prefix: "info"
    body: '''
      {% set sections = craft.sections.getAllSections() %}
      {% set sections = craft.sections.getEditableSections() %}
      {% set total = craft.sections.getTotalSections() %}
      {% set total = craft.sections.getTotalEditableSections() %}
      {% set section = craft.sections.getSectionById( sectionId ) %}
      {% set section = craft.sections.getSectionByHandle( handle ) %}
    '''
  "info: craft.session":
    prefix: "info"
    body: '''
      {% if craft.session.isLoggedIn %}{% endif %}

      {{ craft.session.getRememberedUsername }}
      {{ craft.session.getReturnUrl }}

      {{ craft.session.getFlash( key, defaultValue, delete ) }}
      {{ craft.session.getFlash( key, defaultValue, false ) }}
      {{ craft.session.getFlashes( delete ) }}
      {{ craft.session.getFlashes( false ) }}

      {% if craft.session.hasFlash() %}{% endif %}
    '''
  "craft.tags w/ params":
    prefix: "tagsp"
    body: '''
      {% set tags = craft.tags.find({
        set:    '${1:setName}'
      }) %}

      <ul>
      {% for tag in tags %}
          <li>{{ tag }}</a></li>
      {% endfor %}
      </ul>
      $0
    '''
  "craft.tags":
    prefix: "tags"
    body: '''
      <ul>
      {% for tag in craft.tags
      	.set('${1:setName}')
      	%}
          <li>{{ tag }}</li>
      {% endfor %}
      </ul>
      $0
    '''
  "craft.users w/ params":
    prefix: "usersp"
    body: '''
      {% set accounts = craft.users.find({
        group:    '${1:groupName}'
      }) %}

      {% for account in accounts %}
        {{ account.firstName }} {{ account.lastName }}
      {% endfor %}
      $0
    '''
  "craft.users":
    prefix: "users"
    body: '''
      {% for account in craft.users
      	.group('${1:groupName}')
      	%}
        {{ account.firstName }} {{ account.lastName }}
      {% endfor %}
      $0
    '''
  dump:
    prefix: "dump"
    body: '''
      <pre>
        {{ dump($1) }}
      </pre>
    '''
  else:
    prefix: "endif"
    body: "{% endif %}$0"
  endblock:
    prefix: "endblock"
    body: "{% endblock %}$0"
  endfilter:
    prefix: "endfilter"
    body: "{% endfilter %}$0"
  "text.html.twig":
    prefix: "endfor"
    body: "{% endfor %}$0"
  endset:
    prefix: "endset"
    body: "{% endset %}$0"
  exit:
    prefix: "exit"
    body: "{% exit ${1:404} %}"
  extends:
    prefix: "extends"
    body: "{% extends '${1:template}' %}$0"
  "filter (block)":
    prefix: "filterb"
    body: '''
      {% filter ${1:name} %}
          $0
      {% endfilter %}
    '''
  filter:
    prefix: "filter"
    body: "{% filter ${1:name} %}$0{% endfilter %}"
  floor:
    prefix: "floor"
    body: "floor($1)$0"
  "for ... else":
    prefix: "fore"
    body: '''
      {% for ${1:item} in ${2:items} %}
          $3
      {% else %}
          $0
      {% endfor %}
    '''
  for:
    prefix: "for"
    body: '''
      {% for ${1:item} in ${2:items} %}
          $0
      {% endfor %}
    '''
  if:
    prefix: "if"
    body: "{% if ${1:condition} %}$0{% endif %}"
  "if (block)":
    prefix: "ifb"
    body: '''
      {% if ${1:condition} %}
          $0
      {% endif %}
    '''
  "if ... else":
    prefix: "ife"
    body: '''
      {% if ${1:condition} %}
          $2
      {% else %}
          $0
      {% endif %}
    '''
  "include w/ params":
    prefix: "incp"
    body: '''
      {% include '${1:template}' with {
      	${2:key}: ${3:'${4:value}'}
      }} %}
      $0
    '''
  include:
    prefix: "inc"
    body: "{% include '${1:template}'${2: with ${3:vars} }%}$0"
  includeCssFile:
    prefix: "includecss"
    body: '''
      {% includeCssFile "${1:/resources/css/global.css}" %}
      $0
    '''
  includeCssHiRes:
    prefix: "includecss"
    body: '''
      {% includehirescss %}
      	${1:/* ${2:CSS here} */}
      	$3
      {% endincludehirescss %}
      $0
    '''
  includeJs:
    prefix: "includejs"
    body: '''
      {% includejs %}
      	${1:/* ${2:CSS here} */}
      	$3
      {% endincludejs %}
      $0
    '''
  includeJsFile:
    prefix: "includejs"
    body: '''
      {% includeJsFile "${1:/resources/js/global.js}" %}
      $0
    '''
  includeCss:
    prefix: "includecss"
    body: '''
      {% includecss %}
      	${1:/* ${2:CSS here} */}
      	$3
      {% endincludecss %}
      $0
    '''
  "info: craft.assets":
    prefix: "info"
    body: '''

      {% set assets = craft.assets.first() %}
      {% set assets = craft.assets.last() %}
      {% set assets = craft.assets.nth( n ) %}
      {% set assets = craft.assets.ids() %}
      {% set assets = craft.assets.total() %}

      {% set assets = craft.assets.find({

        filename:   'fileName.jpg',
        fixedOrder: true|false,
        folderId:   id,
        height:     200,
        id:         id,
        kind:       http://buildwithcraft.com/docs/templating/craft.assets#kind,
        offset:     1,
        size:       1000,
        title:      'title',
        source:     'assetSourceHandle'
        sourceId:   id,
        width:      200,

        relatedTo:      element, sourceElement, targetElement, field, sourceLocale,
        childOf:        See supported syntaxes below,
        childField:     'fieldHandle' OR id,
        parentOf:       See supported syntaxes below,
        parentField:    'fieldHandle' OR id,

        order:      'title,id,sourceId,folderId,filename,kind,width,height,size,
                    dateCreated asc,dateUpdated desc',
                    Also supports any textual field handles
        limit:      100,
        locale:     'en_us',
        indexBy:    'id,title',

        search:     'salty dog'           containing both "salty" and "dog"
                    '"salty dog"'         containing the exact phrase "salty dog"
                    'salty OR dog'        containing either "salty" or "dog" (or both)
                    'salty -dog'          containing "salty" but not "dog"
                    'body:salty'          containing "salty" in the "body" field
                    'body:salty'          body:dog containing both "salty" and "dog"
                                          in the "body" field
                    'body:*'              containing anything within the "body" field
                    'salty locale:en_us'  containing "salty" in the locale "en_us"
                    'salt*'               containing a word that begins with "salt"
                    '*ty'                 containing a word that ends with "ty"
                    '*alt*'               containing a word that contains "alt",

        Supported syntaxes for childOf, kind, parentOf
                    elementId
                    AssetFileModel, EntryModel, UserModel, or TagModel
                    [ arrayOfModels, arrayOfModels, arrayOfModels ]
                    [ 1, 2, 3 ]
                    craft.assets, craft.entries, craft.users, craft.tags
      }) %}

      {% for asset in assets %}

        {{ asset.dateCreated }}
        {{ asset.dateUpdated }}
        {{ asset.extension }}
        {{ asset.filename }}
        {{ asset.folder }}
        {{ asset.folderId }}
        {{ asset.height }}
        {{ asset.id }}
        {{ asset.img }}
        {{ asset.kind }}
        {{ asset.locale }}
        {{ asset.link }}
        {{ asset.mimeType }}
        {{ asset.size | filesize }}
        {{ asset.source }}
        {{ asset.sourceId }}
        {{ asset.url }}
        {{ asset.width }}

        {{ asset.getHeight( transform ) }}
        {{ asset.getWidth( transform ) }}
        {{ asset.getUrl( transform ) }}
        {{ asset.setTransform( transform ) }}

        {% set prev = asset.getPrev( params ) %}
        {% set next = asset.getNext( params ) %}
        {% if prev %} <a href="/link-to-prev-asset">{{ prev.title }}</a> {% endif %}
        {% if next %} <a href="/link-to-next-asset">{{ next.title }}</a> {% endif %}

      {% endfor %}}
      $0
    '''
  "info: craft.categories":
    prefix: "info"
    body: '''

      {% set categories = craft.categories.first() %}
      {% set categories = craft.categories.last() %}
      {% set categories = craft.categories.nth( n ) %}
      {% set categories = craft.categories.ids() %}
      {% set categories = craft.categories.total() %}

      {% set categories = craft.categories.find({
        id:             id OR 'not id' ,
        fixedOrder:     true/false,
        title:          'title',
        slug:           'slug',
        uri:            'uri',
        group:          'categoryGroupHandle'
        groupId:        id,
        status:         'live,pending,expired,disabled,null',
        offset:         10,
        level:          2,
        locale:         'en_us',

        relatedTo:      element, sourceElement, targetElement, field, sourceLocale,
        ancestorOf:     CategoryModel OR id,
        ancestorDist:   2,
        descendantOf:   CategoryModel OR id,
        descendantDist: 2,
        nextSiblingOf:  CategoryModel OR id,
        prevSiblingOf:  CategoryModel OR id,

        order:          'title,id,groupId,slug,uri,
                         dateCreated asc,dateUpdated desc',
        limit:          10,
        indexBy:        'id,title',

        search:         'salty dog'           containing both "salty" and "dog"
                        '"salty dog"'         containing the exact phrase "salty dog"
                        'salty OR dog'        containing either "salty" or "dog" (or both)
                        'salty -dog'          containing "salty" but not "dog"
                        'body:salty'          containing "salty" in the "body" field
                        'body:salty'          body:dog containing both "salty" and "dog"
                                              in the "body" field
                        'body:*'              containing anything within the "body" field
                        'salty locale:en_us'  containing "salty" in the locale "en_us"
                        'salt*'               containing a word that begins with "salt"
                        '*ty'                 containing a word that ends with "ty"
                        '*alt*'               containing a word that contains "alt"

      }) %}

      {% for category in categories %}

        {{ category.id }}
        {{ category.level }}
        {{ category.groupId }}
        {{ category.group }}   {# array #}
        {{ category.locale }}
        {{ category.title }}
        {{ category.slug }}
        {{ category.uri }}
        {{ category.url }}       {# full front-end URL #}
        {{ category.link }}      {# full <a> tag #}
        {{ category.cpEditUrl }}

        {{ category.enabled }}
        {{ category.status }}

        {{ category.dateCreated }}
        {{ category.dateUpdated }}

        {{ category.getAncestors( distance ) }}
        {{ category.getDescendants( distance) }}
        {{ category.children }}
        {{ category.parent }}
        {{ category.hasDescendants }}
        {{ category.nextSibling }}
        {{ category.prevSibling }}
        {{ category.isAncestorOf( entry ) }}
        {{ category.isChildOf( entry ) }}
        {{ category.isDescendantOf( entry ) }}
        {{ category.isNextSiblingOf( entry ) }}
        {{ category.isParentOf( entry ) }}
        {{ category.isPrevSiblingOf( entry ) }}
        {{ category.isSiblingOf( entry ) }}

        {% set prev = category.getPrev( params ) %}
        {% set next = category.getNext( params ) %}
        {% if prev %} <a href="{{ prev.url }}">{{ prev.title }}</a> {% endif %}
        {% if next %} <a href="{{ next.url }}">{{ next.title }}</a> {% endif %}

      {% endfor %}}
      $0
    '''
  "info: craft.entries":
    prefix: "info"
    body: '''

      {% set entries = craft.entries.first() %}
      {% set entries = craft.entries.last() %}
      {% set entries = craft.entries.nth( n ) %}
      {% set entries = craft.entries.ids() %}
      {% set entries = craft.entries.total() %}

      {% set entries = craft.entries.find({
        id:             id OR 'not id' ,
        fixedOrder:     true/false,
        slug:           'slug',
        uri:            'uri',
        sectionId:      id,
        section:        'sectionHandle', [arrayOfSectionHandles], SectionModel
        authorId:       id,
        authorGroupId:  id,
        authorGroup:    id,
        postDate:       'YYYY,YYYY-MM,YYYY-MM-DD,YYYY-MM-DD HH:MM,YYYY-MM-DD HH:MM:SS',
        after:          'YYYY,YYYY-MM,YYYY-MM-DD,YYYY-MM-DD HH:MM,YYYY-MM-DD HH:MM:SS',
        before:         'Unix timestamp,DateTime variable',
        status:         'live,pending,expired,disabled,null',
        type:           'entryTypeHandle',
        archived:       true OR false,
        offset:         10,
        level:          2,
        locale:         'en_us',
        localeEnabled:  true/false,

        relatedTo:      element, sourceElement, targetElement, field, sourceLocale,
        ancestorOf:     EntryModel OR id,
        ancestorDist:   2,
        descendantOf:   EntryModel OR id,
        descendantDist: 2,
        nextSiblingOf:  EntryModel OR id,
        prevSiblingOf:  EntryModel OR id,

        order:          'title,id,authorId,sectionId,slug,uri,postDate,expiryDate',
                        'dateCreated asc', 'dateUpdated desc'
        limit:          10,
        indexBy:        'id,title',

        search:         'salty dog'           containing both "salty" and "dog"
                        '"salty dog"'         containing the exact phrase "salty dog"
                        'salty OR dog'        containing either "salty" or "dog" (or both)
                        'salty -dog'          containing "salty" but not "dog"
                        'body:salty'          containing "salty" in the "body" field
                        'body:salty'          body:dog containing both "salty" and "dog"
                                              in the "body" field
                        'body:*'              containing anything within the "body" field
                        'salty locale:en_us'  containing "salty" in the locale "en_us"
                        'salt*'               containing a word that begins with "salt"
                        '*ty'                 containing a word that ends with "ty"
                        '*alt*'               containing a word that contains "alt"

        Supported syntaxes for childOf, kind, parentOf
                        elementId
                        AssetFileModel, EntryModel, UserModel, or TagModel
                        [ arrayOfModels, arrayOfModels, arrayOfModels ]
                        [ 1, 2, 3 ]
                        craft.assets, craft.entries, craft.users, craft.tags

      }) %}

      {% for entry in entries %}

        {{ entry.id }}
        {{ entry.level }}
        {{ entry.sectionId }}
        {{ entry.section }}   {# array #}
        {{ entry.authorId }}
        {{ entry.author }}    {# array #}
        {{ entry.locale }}
        {{ entry.type }}
        {{ entry.title }}
        {{ entry.slug }}
        {{ entry.uri }}
        {{ entry.url }}       {# full front-end URL #}
        {{ entry.link }}      {# full <a> tag #}
        {{ entry.cpEditUrl }}

        {{ entry.enabled }}
        {{ entry.status }}

        {{ entry.postDate }}
        {{ entry.expiryDate }}
        {{ entry.dateCreated }}
        {{ entry.dateUpdated }}

        {{ entry.getAncestors( distance ) }}
        {{ entry.getDescendants( distance) }}
        {{ entry.children }}
      	{{ entry.parent }}
        {{ entry.hasDescendants }}
        {{ entry.nextSibling }}
        {{ entry.prevSibling }}
        {{ entry.isAncestorOf( entry ) }}
        {{ entry.isChildOf( entry ) }}
        {{ entry.isDescendantOf( entry ) }}
        {{ entry.isNextSiblingOf( entry ) }}
        {{ entry.isParentOf( entry ) }}
        {{ entry.isPrevSiblingOf( entry ) }}
        {{ entry.isSiblingOf( entry ) }}

        {% set prev = entry.getPrev( params ) %}
        {% set next = entry.getNext( params ) %}
        {% if prev %} <a href="{{ prev.url }}">{{ prev.title }}</a> {% endif %}
        {% if next %} <a href="{{ next.url }}">{{ next.title }}</a> {% endif %}

      {% endfor %}}
      $0
    '''
  "info: craft.feeds":
    prefix: "info"
    body: '''
      {# Required #}
      {% set feedUrl  = "http://feeds.feedburner.com/blogandtonic" %}

      {# Option #}
      {% set limit    = 10 %} {# How many items to return. Default: All #}
      {% set skip     = 0 %}  {# How many items to skip.   Default: Zero #}

      {% set items = craft.feeds.getFeedItems( url, limit, offset, cacheDuration ) %}

      {% for item in items %}

        {{ title }}
        {{ summary }}
        {{ content }}

        {{ date }}
        {{ dateUpdated }}
        {{ permalink }}

        {{ authors }}               {# array #}
        {{ authors[0].name }}
        {{ authors[0].url }}
        {{ authors[0].email }}

        {{ contributors }}          {# array #}
        {{ contributors[0].name }}
        {{ contributors[0].url }}
        {{ contributors[0].email }}

        {{ categories }}            {# array #}
        {{ categories[0].term }}
        {{ categories[0].scheme }}
        {{ categories[0].label }}

      {% endfor %}
      $0
    '''
  "info: craft.request":
    prefix: "info"
    body: '''
      {# Properties #}
      {{ craft.request.isAjax }}
      {{ craft.request.isLivePreview }}
      {{ craft.request.isSecure }}

      {{ craft.request.path }}
      {{ craft.request.url }}
      {{ craft.request.urlReferrer }}
      {{ craft.request.pageNum }}

      {{ craft.request.queryString }}
      {{ craft.request.queryStringWithoutPath }}
      {{ craft.request.segments }}        {# array #}

      {{ craft.request.firstSegment }}
      {{ craft.request.lastSegment }}

      {{ craft.request.serverName }}

      {# Methods #}
      {{ craft.request.isMobileBrowser() }}

      {{ craft.request.getSegment( n ) }}
      {{ craft.request.getCookie( name ) }}
      {{ craft.request.getParam( name ) }}  {# Returns a parameter from either the query string or POST data. #}
      {{ craft.request.getQuery( name ) }}  {# Returns a parameter from the query string. #}
      {{ craft.request.getPost( name ) }}   {# Returns a parameter from the POST data. #}

      $0
    '''
  "info: craft.tags":
    prefix: "info"
    body: '''

      {% set tags = craft.tags.first() %}
      {% set tags = craft.tags.last() %}
      {% set tags = craft.tags.nth( n ) %}
      {% set tags = craft.tags.ids() %}
      {% set tags = craft.tags.total() %}

      {% set tags = craft.tags.find({
        id:             id OR 'not id' ,
        fixedOrder:     true|false,
        title:          'title',
        group:          'tagGroupHandle',
        groupId:        id,
        offset:         2,

        relatedTo:  element, sourceElement, targetElement, field, sourceLocale,

        order:          'title,id,groupId,dateCreated asc,dateUpdated desc',
        limit:          10,
        locale:         'en_us',
        indexBy:        'id,title',

        search:         'salty dog'           containing both "salty" and "dog"
                        '"salty dog"'         containing the exact phrase "salty dog"
                        'salty OR dog'        containing either "salty" or "dog" (or both)
                        'salty -dog'          containing "salty" but not "dog"
                        'body:salty'          containing "salty" in the "body" field
                        'body:salty'          body:dog containing both "salty" and "dog"
                                              in the "body" field
                        'body:*'              containing anything within the "body" field
                        'salty locale:en_us'  containing "salty" in the locale "en_us"
                        'salt*'               containing a word that begins with "salt"
                        '*ty'                 containing a word that ends with "ty"
                        '*alt*'               containing a word that contains "alt"

        Supported syntaxes for childOf, kind, parentOf
                        elementId
                        AssetFileModel, EntryModel, UserModel, or TagModel
                        [ arrayOfModels, arrayOfModels, arrayOfModels ]
                        [ 1, 2, 3 ]
                        craft.assets, craft.entries, craft.users, craft.tags

      }) %}

      {% for tag in tags %}

        {{ tag.id }}
        {{ tag.title }}
        {{ tag.group }}
        {{ tag.groupId }}
        {{ tag.locale }}

        {% set prev = tag.getPrev( params ) %}
        {% set next = tag.getNext( params ) %}
        {% if prev %} <a href="/link-to-prev-tag">{{ prev.name }}</a> {% endif %}
        {% if next %} <a href="/link-to-next-tag">{{ next.name }}</a> {% endif %}

      {% endfor %}}
      $0
    '''
  "info: craft.users":
    prefix: "info"
    body: '''

      {% set users = craft.users.first() %}
      {% set users = craft.users.last() %}
      {% set users = craft.users.nth( n ) %}
      {% set users = craft.users.ids() %}
      {% set users = craft.users.total() %}

      {% set users = craft.users.find({
        admin:        true OR false,
        can:          'createEntries:5'
        email:        'email',
        firstName:    'firstName',
        group:        'groupHandle',
        groupId:      id,
        id:           id OR 'not id',
        fixedOrder:   true|false,
        lastLoginDate: 'YYYY,YYYY-MM,YYYY-MM-DD,YYYY-MM-DD HH:MM,YYYY-MM-DD HH:MM:SS',
        lastName:     'lastName',
        offset:       1,
        status:       'active,locked,suspended,pending,archived,null',
        username:     'username,

        relatedTo:  element, sourceElement, targetElement, field, sourceLocale,

        order:      'username,firstName,lastName,email,preferredLocale,status,lastLoginDate,
                     dateCreated asc,dateUpdated desc',
        limit:      number,
        indexBy:    'id,username'

        search:     'salty dog'           containing both "salty" and "dog"
                    '"salty dog"'         containing the exact phrase "salty dog"
                    'salty OR dog'        containing either "salty" or "dog" (or both)
                    'salty -dog'          containing "salty" but not "dog"
                    'body:salty'          containing "salty" in the "body" field
                    'body:salty'          body:dog containing both "salty" and "dog"
                                          in the "body" field
                    'body:*'              containing anything within the "body" field
                    'salty locale:en_us'  containing "salty" in the locale "en_us"
                    'salt*'               containing a word that begins with "salt"
                    '*ty'                 containing a word that ends with "ty"
                    '*alt*'               containing a word that contains "alt",

      }) %}

      {% for user in users %}

        {{ user.id }}
        {{ user.username }}
        {{ user.name }}
        {{ user.firstName }}
        {{ user.lastName }}
        {{ user.fullName }}
        {{ user.friendlyName }}    {# falls back to username #}
        {{ user.email }}

        {{ user.preferredLocale }}
        {{ user.admin }}           {# true,false #}
        {{ user.status }}          {# active, locked, suspended, pending, archived #}
        {{ user.isCurrent }}       {# is currently logged in #}

        {{ user.lastLoginDate }}
        {{ user.dateCreated }}
        {{ user.dateUpdated }}

        {{ user.getChildren( fields ) }}
        {{ user.getParents( fields ) }}

        {{ user.getGroups() }}
        {{ user.isInGroup( groupHandle OR groupId OR UserGroupModel ) }}
        {{ user.getPhotoUrl( size ) }}
        {{ user.isCurrent() }}
        {{ user.can( 'permission' ) }}

        {% set prev = user.getPrev( params ) %}
        {% set next = user.getNext( params ) %}
        {% if prev %} <a href="/link-to-prev-user">{{ prev.username }}</a> {% endif %}
        {% if next %} <a href="/link-to-next-user">{{ next.username }}</a> {% endif %}

      {% endfor %}}
      $0
    '''
  matrix:
    prefix: "matrix"
    body: '''
      {% for block in ${1:entry.matrixFieldHandle} %}

      	{% if block.type == '${2:blockHandle}' %}
      		{{ block.${3:fieldHandle} }}
      	{% endif %}

      	{% if block.type == '${4:blockHandle}' %}
      		{{ block.${5:fieldHandle} }}
      	{% endif %}

      {% endfor %}
      $0
    '''
  max:
    prefix: "max"
    body: "max(${1:$2, $3})$0"
  min:
    prefix: "min"
    body: "min(${1:$2, $3})$0"
  "paginate simple":
    prefix: "paginate"
    body: '''
      {% paginate craft.entries.section('blog').limit(10) as entries %}

          {% for entry in entries %}
              <article>
                  <h1>{{ entry.title }}</h1>
                  {{ entry.body }}
              </article>
          {% endfor %}

          {% if paginate.prevUrl %}
              <a href="{{ paginate.prevUrl }}">Previous Page</a>
          {% endif %}

          {% if paginate.nextUrl %}
              <a href="{{ paginate.nextUrl }}">Next Page</a>
          {% endif %}

      {% endpaginate %}
      $0
    '''
  "paginate advanced":
    prefix: "paginate"
    body: '''
      {# PAGINATION

      For this pagination to work properly, we need to be sure to set
      the paginateBase variable in the template we are including the
      pagination in.

      {% set paginateBase = "/blog/p" %}
      #}

      {% if paginate.totalPages > 1 %}
      <ul>
          {% if paginate.currentPage != "1"  %}
              <li><a href="{{ paginateBase ~ '1' }}">First Page</a></li>
          {% endif %}

          {% if paginate.prevUrl %}
              <li><a href="{{ paginate.prevUrl }}">Previous Page</a></li>
          {% endif %}

          {% for pageNumber in 1..paginate.totalPages %}
              <li {% if paginate.currentPage == pageNumber %}class="active-page"{% endif %}>
                  <a href="{{ paginateBase ~ pageNumber }}">{{ pageNumber }}</a>
              </li>
          {% endfor %}

          {% if paginate.nextUrl %}
              <li><a href="{{ paginate.nextUrl }}">Next Page</a></li>
          {% endif %}

          {% if paginate.currentPage != paginate.total %}
              <li><a href="{{ paginateBase ~ paginate.total }}">Last Page</a></li>
          {% endif %}
      </ul>
      {% endif %}
      $0
    '''
  redirect:
    prefix: "redirect"
    body: '''
      {% redirect '${1:template/path or http://straightupcraft.com}' %}
      $0
    '''
  "request getParam":
    prefix: "request"
    body: '''
      craft.request.getParam(${1:'Query String or Post Variable Name'})
      $0
    '''
  "request getPost":
    prefix: "request"
    body: '''
      craft.request.getPost(${1:'postVariableName'})
      $0
    '''
  "request getQuery":
    prefix: "request"
    body: '''
      craft.request.getQuery(${1:'queryStringName'})
      $0
    '''
  "request getSegment":
    prefix: "request"
    body: '''
      craft.request.getSegment(${1:2})
      $0
    '''
  requirePermission:
    prefix: "requirepermission"
    body: '''
      {% requirePermission "${1:spendTheNight}" %}
      $0
    '''
  round:
    prefix: "round"
    body: "round($1)$0"
  "set (block)":
    prefix: "setb"
    body: '''
      {% set ${1:var} %}
          $0
      {% endset %}
    '''
  set:
    prefix: "set"
    body: "{% set ${1:var} = ${2:value} %}$0"
  shuffle:
    prefix: "shuffle"
    body: "shuffle($1)$0"
  switch:
    prefix: "switch"
    body: '''
      {% switch ${1:variable} %}

      	{% case "${2:value1}" %}


      	{% case "${3:value2}" %}


      	{% default %}


      {% endswitch %}
      $0
    '''
  "{% ... %}":
    prefix: "%%"
    body: "{% $1 %}$2"
  "{# ... #}":
    prefix: "##"
    body: "{# $1 #}$2"
  "{{ ... }}":
    prefix: "}}"
    body: "{{ $1 }}$2"
  "info: globals":
    prefix: "info"
    body: '''

      SITE
      {{ siteName }}
      {{ siteUrl }}
      {{ loginUrl }}
      {{ logoutUrl }}

      DATE
      {{ now.year }}
      {{ now.month }}
      {{ now.day }}
      {{ now|date("M d, Y") }}
      {{ now|date_modify("+1 day") }}

      USERS
      {{ currentUser }}  {# null if no user is logged in #}
      {{ currentUser.id }}
      {{ currentUser.username }}
      {{ currentUser.firstName }}
      {{ currentUser.lastName }}
      {{ currentUser.friendlyName }}
      {{ currentUser.email }}
      {{ currentUser.preferredLocale }}
      {{ currentUser.admin }}
      {{ currentUser.status }}  {# active, locked, suspended, pending, archived #}
      {{ currentUser.lastLoginDate }}
      {{ currentUser.dateCreated }}
      {{ currentUser.dateUpdated }}

      {{ currentUser.getChildren() }}
      {{ currentUser.getParents() }}

      {% set params = { group: 'authors', order: 'firstName, lastName' } %}
      {{ currentUser.getNext( params ) }}
      {{ currentUser.getPrev( params ) }}

      GLOBALS
      {{ globalSetName.fieldName }}

      TAGS
      {{ craft.assets }}
      {{ craft.categories }}
      {{ craft.entries }}
      {{ craft.tags }}
      {{ craft.user }}

      {{ craft.config }}
      {{ craft.feeds }}
      {{ craft.fields }}
      {{ craft.globals }}
      {{ craft.request }}
      {{ craft.sections }}
      {{ craft.session }}

      $0
    '''
  csrf:
    prefix: "csrf"
    body: '''
      {{ getCsrfInput() }}
      $0
    '''
  "url w/ arguments":
    prefix: "urla"
    body: "url('${1:path}', ${2:{foo:'1', bar:'2'\\}}, ${3:'http'}, ${4:false})$0"
  url:
    prefix: "url"
    body: "url('${1:path}')$0"
".test.html.twig":
  requireLogin:
    prefix: "requirelogin"
    body: '''
      {% requireLogin %}
      $0
    '''
".source.php":
  "dump and die":
    prefix: "dd"
    body: "Craft::dd($1);"
