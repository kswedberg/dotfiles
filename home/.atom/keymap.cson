# Your keymap
#
# Atom keymaps work similarly to style sheets. Just as style sheets use
# selectors to apply styles to elements, Atom keymaps use selectors to associate
# keystrokes with events in specific contexts. Unlike style sheets however,
# each selector can only be declared once.
#
# You can create a new keybinding in this file by typing "key" and then hitting
# tab.
#
# Here's an example taken from Atom's built-in keymap:
#
# 'atom-text-editor':
#   'enter': 'editor:newline'
#
# 'atom-workspace':
#   'ctrl-shift-p': 'core:move-up'
#   'ctrl-p': 'core:move-down'
#
# You can find more information about keymaps in these guides:
# * http://flight-manual.atom.io/using-atom/sections/basic-customization/#customizing-keybindings
# * http://flight-manual.atom.io/behind-atom/sections/keymaps-in-depth/
#
# If you're having trouble with your keybindings not working, try the
# Keybinding Resolver: `Cmd+.` on macOS and `Ctrl+.` on other platforms. See the
# Debugging Guide for more information:
# * http://flight-manual.atom.io/hacking-atom/sections/debugging/#check-the-keybindings
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it in the
# Atom Flight Manual:
# http://flight-manual.atom.io/using-atom/sections/basic-customization/#configuring-with-cson

'.platform-darwin':

  'ctrl-cmd-i': 'swed:toggle-vcs-ignored-files'
  "cmd-alt-r": "symbols-list:toggle"

'body':
  # Multi-pane:
  "cmd-alt-right": "window:focus-previous-pane"
  "cmd-alt-left": "window:focus-next-pane"

  'ctrl-cmd-shift-right': 'window:move-active-item-to-pane-on-right'
  'ctrl-cmd-shift-left':  'window:move-active-item-to-pane-on-left'

  'ctrl-cmd-alt-right': 'pane:split-right'
  'ctrl-cmd-alt-left': 'pane:split-left'
  'ctrl-cmd-alt-up': 'pane:split-up'
  'ctrl-cmd-alt-down': 'pane:split-down'


'atom-text-editor:not([mini]),
 atom-text-editor:not(.autocomplete-active)': {
  'cmd-escape': 'autocomplete-plus:activate'
}

'.platform-darwin atom-workspace':
  'cmd-shift-f': 'project-find:show-in-current-directory'

# Markdown Preview Plus,
# Markdown Writer
".platform-darwin atom-text-editor[data-grammar~='gfm'],
.platform-darwin atom-text-editor[data-grammar~='md']":
  "shift-cmd-K": "markdown-writer:insert-link"
  "shift-cmd-I": "markdown-writer:insert-image"
  "cmd-i":       "markdown-writer:toggle-italic-text"
  "cmd-b":       "markdown-writer:toggle-bold-text"
  "ctrl-cmd-alt-m": "markdown-preview-plus:toggle"

# End line
'atom-text-editor[data-grammar~="css"]:not([mini]),
atom-text-editor[data-grammar~="html"]:not([mini])':
  'ctrl-;': 'js-extras:end-line'
  'ctrl-,': 'js-extras:end-line-comma'
  'ctrl-enter': 'js-extras:end-new-line'
  'cmd-shift-enter': 'js-extras:end-new-line'
  'ctrl-b': 'js-extras:wrap-block'
'atom-text-editor[data-grammar~="js"]:not([mini]':
  'cmd-shift-enter': 'js-extras:end-new-line'

'atom-workspace atom-text-editor:not([mini])':
  'cmd-alt-[': 'auto-indent:apply'

'.platform-darwin atom-text-editor:not([mini])':
  # Show grammar/syntax selector
  'ctrl-esc': 'grammar-selector:show'

  # Sub-word boundary:
  'ctrl-left': 'editor:move-to-previous-subword-boundary'
  'ctrl-right': 'editor:move-to-next-subword-boundary'
  'ctrl-shift-left': 'editor:select-to-previous-subword-boundary'
  'ctrl-shift-right': 'editor:select-to-next-subword-boundary'


'.platform-darwin atom-pane atom-text-editor:not([mini])':
  'ctrl-cmd-/': 'emmet:toggle-comment'
  'cmd-/': 'editor:toggle-line-comments'
'.platform-darwin atom-pane atom-text-editor[data-grammar~="css"]:not([mini])':
  'cmd-/': 'emmet:toggle-comment'
# Make tab completion work with anything that extends html
'atom-text-editor[data-grammar~="html"]:not([mini]':
  # 'tab': 'emmet:expand-abbreviation-with-tab'
  'ctrl-e': 'emmet:expand-abbreviation-with-tab'
